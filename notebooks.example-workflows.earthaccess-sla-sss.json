{"version":2,"kind":"Notebook","sha256":"4c4add0347ff70f6119bca50c6500c2ba8963d8e72e7c3fe3c74e33c22881b7c","slug":"notebooks.example-workflows.earthaccess-sla-sss","location":"/notebooks/example-workflows/earthaccess-sla-sss.ipynb","dependencies":[],"frontmatter":{"title":"Data access via earthaccess library and vizualization with cartopy","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/api-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/api-cookbook/blob/main/notebooks/example-workflows/earthaccess-sla-sss.ipynb","thumbnail":"/api-cookbook/build/earthaccess_subplots-24f8a48c1c36b3a021559132c33b53a6.png","exports":[{"format":"ipynb","filename":"earthaccess-sla-sss.ipynb","url":"/api-cookbook/build/earthaccess-sla-sss-f0b931caa7391d1cae5f639645f363cd.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"image","url":"/api-cookbook/build/earthaccess_subplots-24f8a48c1c36b3a021559132c33b53a6.png","alt":"sla and sss subplots","title":"Image showing two maps of the Western Tropical Atlantic, both with data for the date 2020-09-23. On the left, a map of sea surface height anomaly, and on the right, a map of sea surface salinity.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wjR4Do7uBE","urlSource":"../images/earthaccess_subplots.png"}],"key":"y5gMzIYo87"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Data access via earthaccess library and vizualization with cartopy","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wIytJX6nDA"}],"identifier":"data-access-via-earthaccess-library-and-vizualization-with-cartopy","label":"Data access via earthaccess library and vizualization with cartopy","html_id":"data-access-via-earthaccess-library-and-vizualization-with-cartopy","implicit":true,"key":"p08hajSy3Y"},{"type":"comment","value":" In this Notebook, we will access data via the earthaccess python library. Then, we will do some quick visualization to find out the data of interest, to then make informational plots and, if desired, download data.  ","key":"PjYdIEuJvE"}],"key":"GMAdereoBY"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lYcNBijh5q"}],"key":"qs7PAmchWs"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nMqWp0DJ6R"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"iiZgEkD6nb"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Within this notebook, we will cover:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zcfDoqekOG"}],"key":"EKtwz8PUP7"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"How to search data via Earthdata Search web application","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"EPr7FAB26w"}],"key":"m9L7oMWois"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"How to access NASA Earth Science data via ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"PhixzSBEjU"},{"type":"inlineCode","value":"earthaccess","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"IyppFcx9wH"}],"key":"tg5AOaR4jn"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"How to subset, set attributes and modify coordinates for ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ECekob208S"},{"type":"inlineCode","value":"xarray","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"K46iBZccaF"},{"type":"text","value":" Datasets","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"x5eOrMjSBs"}],"key":"oGoz3KgWUL"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"How to visualize data with ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"dFSZPEwAgM"},{"type":"inlineCode","value":"hvplot","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"gjUFtcZcpV"},{"type":"text","value":" and ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"j2AwnyIKr5"},{"type":"inlineCode","value":"cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Ia4NhrulkE"}],"key":"cet24sGfsG"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"How to download data","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"g13Q7x5o38"}],"key":"caDAxABUAR"}],"key":"ltH0cvRYWQ"},{"type":"comment","value":" Downloading data via Graphical User Interfaces (GUI) can be great for small datasets in isolated instances, but it has a few disadvantages, such as\n* it can be tedious - if you have to get data multiple times, repeatedly doing the same task is not a lot of fun, and this time could be better spent\n* it is more prone to human error - if you do many times the same task, odds are at some point you will make some mistake\n* storage issues - Sometimes it is hard to subset the data via GUI and you're stuck downloading large files when you needed just a small portion of them\n* it is not best science reproducibility practice - you can have the source of the data in your documents, but if you can have the actual data access method within the code, that makes it much easier for the work to be reproduced and for other researchers to build upon it\n\nAccessing data programatically, via application programming interface (API), is pretty advantageous when you consider those issues. In this notebook we will present an example of a workflow with access to data via `earthaccess`, a python library for accessing NASA Earth Science data.  ","key":"d2H6rRmOzc"}],"key":"YybY8eChzt"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"y9iSxOyXOJ"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"OTFwj9ZJsi"},{"type":"comment","value":" In this notebook, we will access some data with the `xarray` library and plot some maps with the `matplotlib` and `cartopy` python libraries. ","key":"LCKn7xBmTC"},{"type":"table","position":{"start":{"line":5,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"FfZKiuIJjT"}],"key":"wUW1MxZMQl"},{"type":"tableCell","header":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"SoHPzsOKsC"}],"key":"yLm74X4bvE"},{"type":"tableCell","header":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"aDBAyAJpz5"}],"key":"e5ond3sg1B"}],"key":"throC7BQMx"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/xarray/xarray-intro","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Xarray","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"zQMfu8cBl7"}],"urlSource":"https://foundations.projectpythia.org/core/xarray/xarray-intro","key":"DPRGeHsCTq"}],"key":"OuSlsW0DWH"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"N0TjJVjkHb"}],"key":"TnrIsUCIYV"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Data and metadata structure","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"jZBOfR4hL3"}],"key":"geDMMVtekb"}],"key":"yhSRb3xESQ"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/data-formats/netcdf-cf","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"netCDF","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"X7k4yfYZ7t"}],"urlSource":"https://foundations.projectpythia.org/core/data-formats/netcdf-cf","key":"q48md9njdA"}],"key":"UJH56xBZKy"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"PKp4zFMTLB"}],"key":"LB1Zim1aNM"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Data and metadata structure","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"RzxSL1YQNW"}],"key":"h7WbZyaRYa"}],"key":"g3EmSKMxqz"},{"type":"tableRow","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib/matplotlib-basics","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Understanding of matplotlib","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"mfcRHesNNF"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib/matplotlib-basics","key":"cxiikJNMuT"}],"key":"prr3ejSIa7"},{"type":"tableCell","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"lVHp8xYc4b"}],"key":"x7e7TASvCM"},{"type":"tableCell","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Familiarity with plots","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"w9fpoO9sUD"}],"key":"xrnXrvIors"}],"key":"gIb0UQLWw4"},{"type":"tableRow","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"dN11oyuEXc"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy","key":"DaHAY0h318"}],"key":"sviEshT6Ze"},{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"lzBk1QJjgB"}],"key":"bUSzV7w4AD"},{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Familiarity with maps","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"RBUu83tLW3"}],"key":"NX27WZXg4d"}],"key":"nIrYI3e1FD"}],"key":"QtpmkWZnVY"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"strong","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"lyt6gbKkBW"}],"key":"Z9tBYSPcDx"},{"type":"text","value":": 30 minutes","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"WC11wmu42D"}],"key":"T8geFPw9tz"}],"key":"aDdLHKOJJB"}],"key":"STUQhhQ3eF"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"D3970u5Qqo"}],"key":"KsRTtifxs4"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ptf9zmpmwX"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"L4aCxAuUuG"}],"key":"rVHx0Xwqnm"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import warnings\nwarnings.simplefilter('ignore')\nwarnings.filterwarnings('ignore')\n\nimport earthaccess \nimport xarray as xr\nimport hvplot.xarray\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom cartopy import crs as ccrs, feature as cfeature","key":"Ac0V4cXW9N"},{"type":"output","id":"344XdSMFMSdsbrg5HVik9","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"<script type=\"esms-options\">{\"shimMode\": true}</script><style>*[data-root-id],\n*[data-root-id] > * {\n  box-sizing: border-box;\n  font-family: var(--jp-ui-font-family);\n  font-size: var(--jp-ui-font-size1);\n  color: var(--vscode-editor-foreground, var(--jp-ui-font-color1));\n}\n\n/* Override VSCode background color */\n.cell-output-ipywidget-background:has(\n  > .cell-output-ipywidget-background > .lm-Widget > *[data-root-id]\n),\n.cell-output-ipywidget-background:has(> .lm-Widget > *[data-root-id]) {\n  background-color: transparent !important;\n}\n</style>","content_type":"text/html"}}},{"output_type":"display_data","metadata":{},"data":{"application/javascript":{"content":"(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  const force = true;\n  const py_version = '3.7.3'.replace('rc', '-rc.').replace('.dev', '-dev.');\n  const reloading = false;\n  const Bokeh = root.Bokeh;\n\n  // Set a timeout for this load but only if we are not already initializing\n  if (typeof (root._bokeh_timeout) === \"undefined\" || (force || !root._bokeh_is_initializing)) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks;\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, js_modules, js_exports, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n    if (js_modules == null) js_modules = [];\n    if (js_exports == null) js_exports = {};\n\n    root._bokeh_onload_callbacks.push(callback);\n\n    if (root._bokeh_is_loading > 0) {\n      // Don't load bokeh if it is still initializing\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    } else if (js_urls.length === 0 && js_modules.length === 0 && Object.keys(js_exports).length === 0) {\n      // There is nothing to load\n      run_callbacks();\n      return null;\n    }\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n    window._bokeh_on_load = on_load\n\n    function on_error(e) {\n      const src_el = e.srcElement\n      console.error(\"failed to load \" + (src_el.href || src_el.src));\n    }\n\n    const skip = [];\n    if (window.requirejs) {\n      window.requirejs.config({'packages': {}, 'paths': {}, 'shim': {}});\n      root._bokeh_is_loading = css_urls.length + 0;\n    } else {\n      root._bokeh_is_loading = css_urls.length + js_urls.length + js_modules.length + Object.keys(js_exports).length;\n    }\n\n    const existing_stylesheets = []\n    const links = document.getElementsByTagName('link')\n    for (let i = 0; i < links.length; i++) {\n      const link = links[i]\n      if (link.href != null) {\n        existing_stylesheets.push(link.href)\n      }\n    }\n    for (let i = 0; i < css_urls.length; i++) {\n      const url = css_urls[i];\n      const escaped = encodeURI(url)\n      if (existing_stylesheets.indexOf(escaped) !== -1) {\n        on_load()\n        continue;\n      }\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }    var existing_scripts = []\n    const scripts = document.getElementsByTagName('script')\n    for (let i = 0; i < scripts.length; i++) {\n      var script = scripts[i]\n      if (script.src != null) {\n        existing_scripts.push(script.src)\n      }\n    }\n    for (let i = 0; i < js_urls.length; i++) {\n      const url = js_urls[i];\n      const escaped = encodeURI(url)\n      if (skip.indexOf(escaped) !== -1 || existing_scripts.indexOf(escaped) !== -1) {\n        if (!window.requirejs) {\n          on_load();\n        }\n        continue;\n      }\n      const element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n    for (let i = 0; i < js_modules.length; i++) {\n      const url = js_modules[i];\n      const escaped = encodeURI(url)\n      if (skip.indexOf(escaped) !== -1 || existing_scripts.indexOf(escaped) !== -1) {\n        if (!window.requirejs) {\n          on_load();\n        }\n        continue;\n      }\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      element.type = \"module\";\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n    for (const name in js_exports) {\n      const url = js_exports[name];\n      const escaped = encodeURI(url)\n      if (skip.indexOf(escaped) >= 0 || root[name] != null) {\n        if (!window.requirejs) {\n          on_load();\n        }\n        continue;\n      }\n      var element = document.createElement('script');\n      element.onerror = on_error;\n      element.async = false;\n      element.type = \"module\";\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      element.textContent = `\n      import ${name} from \"${url}\"\n      window.${name} = ${name}\n      window._bokeh_on_load()\n      `\n      document.head.appendChild(element);\n    }\n    if (!js_urls.length && !js_modules.length) {\n      on_load()\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  const js_urls = [\"https://cdn.holoviz.org/panel/1.7.5/dist/bundled/reactiveesm/es-module-shims@^1.10.0/dist/es-module-shims.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-3.7.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-gl-3.7.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-3.7.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-3.7.3.min.js\", \"https://cdn.holoviz.org/panel/1.7.5/dist/panel.min.js\"];\n  const js_modules = [];\n  const js_exports = {};\n  const css_urls = [];\n  const inline_js = [    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\nfunction(Bokeh) {} // ensure no trailing comma for IE\n  ];\n\n  function run_inline_js() {\n    if ((root.Bokeh !== undefined) || (force === true)) {\n      for (let i = 0; i < inline_js.length; i++) {\n        try {\n          inline_js[i].call(root, root.Bokeh);\n        } catch(e) {\n          if (!reloading) {\n            throw e;\n          }\n        }\n      }\n      // Cache old bokeh versions\n      if (Bokeh != undefined && !reloading) {\n        var NewBokeh = root.Bokeh;\n        if (Bokeh.versions === undefined) {\n          Bokeh.versions = new Map();\n        }\n        if (NewBokeh.version !== Bokeh.version) {\n          Bokeh.versions.set(NewBokeh.version, NewBokeh)\n        }\n        root.Bokeh = Bokeh;\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    }\n    root._bokeh_is_initializing = false\n  }\n\n  function load_or_wait() {\n    // Implement a backoff loop that tries to ensure we do not load multiple\n    // versions of Bokeh and its dependencies at the same time.\n    // In recent versions we use the root._bokeh_is_initializing flag\n    // to determine whether there is an ongoing attempt to initialize\n    // bokeh, however for backward compatibility we also try to ensure\n    // that we do not start loading a newer (Panel>=1.0 and Bokeh>3) version\n    // before older versions are fully initialized.\n    if (root._bokeh_is_initializing && Date.now() > root._bokeh_timeout) {\n      // If the timeout and bokeh was not successfully loaded we reset\n      // everything and try loading again\n      root._bokeh_timeout = Date.now() + 5000;\n      root._bokeh_is_initializing = false;\n      root._bokeh_onload_callbacks = undefined;\n      root._bokeh_is_loading = 0\n      console.log(\"Bokeh: BokehJS was loaded multiple times but one version failed to initialize.\");\n      load_or_wait();\n    } else if (root._bokeh_is_initializing || (typeof root._bokeh_is_initializing === \"undefined\" && root._bokeh_onload_callbacks !== undefined)) {\n      setTimeout(load_or_wait, 100);\n    } else {\n      root._bokeh_is_initializing = true\n      root._bokeh_onload_callbacks = []\n      const bokeh_loaded = root.Bokeh != null && (root.Bokeh.version === py_version || (root.Bokeh.versions !== undefined && root.Bokeh.versions.has(py_version)));\n      if (!reloading && !bokeh_loaded) {\n        if (root.Bokeh) {\n          root.Bokeh = undefined;\n        }\n        console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n      }\n      load_libs(css_urls, js_urls, js_modules, js_exports, function() {\n        console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n        run_inline_js();\n      });\n    }\n  }\n  // Give older versions of the autoload script a head-start to ensure\n  // they initialize before we start loading newer version.\n  setTimeout(load_or_wait, 100)\n}(window));","content_type":"application/javascript"},"application/vnd.holoviews_load.v0+json":{"content":"(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  const force = true;\n  const py_version = '3.7.3'.replace('rc', '-rc.').replace('.dev', '-dev.');\n  const reloading = false;\n  const Bokeh = root.Bokeh;\n\n  // Set a timeout for this load but only if we are not already initializing\n  if (typeof (root._bokeh_timeout) === \"undefined\" || (force || !root._bokeh_is_initializing)) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks;\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, js_modules, js_exports, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n    if (js_modules == null) js_modules = [];\n    if (js_exports == null) js_exports = {};\n\n    root._bokeh_onload_callbacks.push(callback);\n\n    if (root._bokeh_is_loading > 0) {\n      // Don't load bokeh if it is still initializing\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    } else if (js_urls.length === 0 && js_modules.length === 0 && Object.keys(js_exports).length === 0) {\n      // There is nothing to load\n      run_callbacks();\n      return null;\n    }\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n    window._bokeh_on_load = on_load\n\n    function on_error(e) {\n      const src_el = e.srcElement\n      console.error(\"failed to load \" + (src_el.href || src_el.src));\n    }\n\n    const skip = [];\n    if (window.requirejs) {\n      window.requirejs.config({'packages': {}, 'paths': {}, 'shim': {}});\n      root._bokeh_is_loading = css_urls.length + 0;\n    } else {\n      root._bokeh_is_loading = css_urls.length + js_urls.length + js_modules.length + Object.keys(js_exports).length;\n    }\n\n    const existing_stylesheets = []\n    const links = document.getElementsByTagName('link')\n    for (let i = 0; i < links.length; i++) {\n      const link = links[i]\n      if (link.href != null) {\n        existing_stylesheets.push(link.href)\n      }\n    }\n    for (let i = 0; i < css_urls.length; i++) {\n      const url = css_urls[i];\n      const escaped = encodeURI(url)\n      if (existing_stylesheets.indexOf(escaped) !== -1) {\n        on_load()\n        continue;\n      }\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }    var existing_scripts = []\n    const scripts = document.getElementsByTagName('script')\n    for (let i = 0; i < scripts.length; i++) {\n      var script = scripts[i]\n      if (script.src != null) {\n        existing_scripts.push(script.src)\n      }\n    }\n    for (let i = 0; i < js_urls.length; i++) {\n      const url = js_urls[i];\n      const escaped = encodeURI(url)\n      if (skip.indexOf(escaped) !== -1 || existing_scripts.indexOf(escaped) !== -1) {\n        if (!window.requirejs) {\n          on_load();\n        }\n        continue;\n      }\n      const element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n    for (let i = 0; i < js_modules.length; i++) {\n      const url = js_modules[i];\n      const escaped = encodeURI(url)\n      if (skip.indexOf(escaped) !== -1 || existing_scripts.indexOf(escaped) !== -1) {\n        if (!window.requirejs) {\n          on_load();\n        }\n        continue;\n      }\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      element.type = \"module\";\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n    for (const name in js_exports) {\n      const url = js_exports[name];\n      const escaped = encodeURI(url)\n      if (skip.indexOf(escaped) >= 0 || root[name] != null) {\n        if (!window.requirejs) {\n          on_load();\n        }\n        continue;\n      }\n      var element = document.createElement('script');\n      element.onerror = on_error;\n      element.async = false;\n      element.type = \"module\";\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      element.textContent = `\n      import ${name} from \"${url}\"\n      window.${name} = ${name}\n      window._bokeh_on_load()\n      `\n      document.head.appendChild(element);\n    }\n    if (!js_urls.length && !js_modules.length) {\n      on_load()\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  const js_urls = [\"https://cdn.holoviz.org/panel/1.7.5/dist/bundled/reactiveesm/es-module-shims@^1.10.0/dist/es-module-shims.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-3.7.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-gl-3.7.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-3.7.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-3.7.3.min.js\", \"https://cdn.holoviz.org/panel/1.7.5/dist/panel.min.js\"];\n  const js_modules = [];\n  const js_exports = {};\n  const css_urls = [];\n  const inline_js = [    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\nfunction(Bokeh) {} // ensure no trailing comma for IE\n  ];\n\n  function run_inline_js() {\n    if ((root.Bokeh !== undefined) || (force === true)) {\n      for (let i = 0; i < inline_js.length; i++) {\n        try {\n          inline_js[i].call(root, root.Bokeh);\n        } catch(e) {\n          if (!reloading) {\n            throw e;\n          }\n        }\n      }\n      // Cache old bokeh versions\n      if (Bokeh != undefined && !reloading) {\n        var NewBokeh = root.Bokeh;\n        if (Bokeh.versions === undefined) {\n          Bokeh.versions = new Map();\n        }\n        if (NewBokeh.version !== Bokeh.version) {\n          Bokeh.versions.set(NewBokeh.version, NewBokeh)\n        }\n        root.Bokeh = Bokeh;\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    }\n    root._bokeh_is_initializing = false\n  }\n\n  function load_or_wait() {\n    // Implement a backoff loop that tries to ensure we do not load multiple\n    // versions of Bokeh and its dependencies at the same time.\n    // In recent versions we use the root._bokeh_is_initializing flag\n    // to determine whether there is an ongoing attempt to initialize\n    // bokeh, however for backward compatibility we also try to ensure\n    // that we do not start loading a newer (Panel>=1.0 and Bokeh>3) version\n    // before older versions are fully initialized.\n    if (root._bokeh_is_initializing && Date.now() > root._bokeh_timeout) {\n      // If the timeout and bokeh was not successfully loaded we reset\n      // everything and try loading again\n      root._bokeh_timeout = Date.now() + 5000;\n      root._bokeh_is_initializing = false;\n      root._bokeh_onload_callbacks = undefined;\n      root._bokeh_is_loading = 0\n      console.log(\"Bokeh: BokehJS was loaded multiple times but one version failed to initialize.\");\n      load_or_wait();\n    } else if (root._bokeh_is_initializing || (typeof root._bokeh_is_initializing === \"undefined\" && root._bokeh_onload_callbacks !== undefined)) {\n      setTimeout(load_or_wait, 100);\n    } else {\n      root._bokeh_is_initializing = true\n      root._bokeh_onload_callbacks = []\n      const bokeh_loaded = root.Bokeh != null && (root.Bokeh.version === py_version || (root.Bokeh.versions !== undefined && root.Bokeh.versions.has(py_version)));\n      if (!reloading && !bokeh_loaded) {\n        if (root.Bokeh) {\n          root.Bokeh = undefined;\n        }\n        console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n      }\n      load_libs(css_urls, js_urls, js_modules, js_exports, function() {\n        console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n        run_inline_js();\n      });\n    }\n  }\n  // Give older versions of the autoload script a head-start to ensure\n  // they initialize before we start loading newer version.\n  setTimeout(load_or_wait, 100)\n}(window));","content_type":"application/vnd.holoviews_load.v0+json"}}},{"output_type":"display_data","metadata":{},"data":{"application/vnd.holoviews_load.v0+json":{"content":"\nif ((window.PyViz === undefined) || (window.PyViz instanceof HTMLElement)) {\n  window.PyViz = {comms: {}, comm_status:{}, kernels:{}, receivers: {}, plot_index: []}\n}\n\n\n    function JupyterCommManager() {\n    }\n\n    JupyterCommManager.prototype.register_target = function(plot_id, comm_id, msg_handler) {\n      if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {\n        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;\n        comm_manager.register_target(comm_id, function(comm) {\n          comm.on_msg(msg_handler);\n        });\n      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {\n        window.PyViz.kernels[plot_id].registerCommTarget(comm_id, function(comm) {\n          comm.onMsg = msg_handler;\n        });\n      } else if (typeof google != 'undefined' && google.colab.kernel != null) {\n        google.colab.kernel.comms.registerTarget(comm_id, (comm) => {\n          var messages = comm.messages[Symbol.asyncIterator]();\n          function processIteratorResult(result) {\n            var message = result.value;\n            var content = {data: message.data, comm_id};\n            var buffers = []\n            for (var buffer of message.buffers || []) {\n              buffers.push(new DataView(buffer))\n            }\n            var metadata = message.metadata || {};\n            var msg = {content, buffers, metadata}\n            msg_handler(msg);\n            return messages.next().then(processIteratorResult);\n          }\n          return messages.next().then(processIteratorResult);\n        })\n      }\n    }\n\n    JupyterCommManager.prototype.get_client_comm = function(plot_id, comm_id, msg_handler) {\n      if (comm_id in window.PyViz.comms) {\n        return window.PyViz.comms[comm_id];\n      } else if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {\n        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;\n        var comm = comm_manager.new_comm(comm_id, {}, {}, {}, comm_id);\n        if (msg_handler) {\n          comm.on_msg(msg_handler);\n        }\n      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {\n        var comm = window.PyViz.kernels[plot_id].connectToComm(comm_id);\n        let retries = 0;\n        const open = () => {\n          if (comm.active) {\n            comm.open();\n          } else if (retries > 3) {\n            console.warn('Comm target never activated')\n          } else {\n            retries += 1\n            setTimeout(open, 500)\n          }\n        }\n        if (comm.active) {\n          comm.open();\n        } else {\n          setTimeout(open, 500)\n        }\n        if (msg_handler) {\n          comm.onMsg = msg_handler;\n        }\n      } else if (typeof google != 'undefined' && google.colab.kernel != null) {\n        var comm_promise = google.colab.kernel.comms.open(comm_id)\n        comm_promise.then((comm) => {\n          window.PyViz.comms[comm_id] = comm;\n          if (msg_handler) {\n            var messages = comm.messages[Symbol.asyncIterator]();\n            function processIteratorResult(result) {\n              var message = result.value;\n              var content = {data: message.data};\n              var metadata = message.metadata || {comm_id};\n              var msg = {content, metadata}\n              msg_handler(msg);\n              return messages.next().then(processIteratorResult);\n            }\n            return messages.next().then(processIteratorResult);\n          }\n        })\n        var sendClosure = (data, metadata, buffers, disposeOnDone) => {\n          return comm_promise.then((comm) => {\n            comm.send(data, metadata, buffers, disposeOnDone);\n          });\n        };\n        var comm = {\n          send: sendClosure\n        };\n      }\n      window.PyViz.comms[comm_id] = comm;\n      return comm;\n    }\n    window.PyViz.comm_manager = new JupyterCommManager();\n    \n\n\nvar JS_MIME_TYPE = 'application/javascript';\nvar HTML_MIME_TYPE = 'text/html';\nvar EXEC_MIME_TYPE = 'application/vnd.holoviews_exec.v0+json';\nvar CLASS_NAME = 'output';\n\n/**\n * Render data to the DOM node\n */\nfunction render(props, node) {\n  var div = document.createElement(\"div\");\n  var script = document.createElement(\"script\");\n  node.appendChild(div);\n  node.appendChild(script);\n}\n\n/**\n * Handle when a new output is added\n */\nfunction handle_add_output(event, handle) {\n  var output_area = handle.output_area;\n  var output = handle.output;\n  if ((output.data == undefined) || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n    return\n  }\n  var id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n  var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n  if (id !== undefined) {\n    var nchildren = toinsert.length;\n    var html_node = toinsert[nchildren-1].children[0];\n    html_node.innerHTML = output.data[HTML_MIME_TYPE];\n    var scripts = [];\n    var nodelist = html_node.querySelectorAll(\"script\");\n    for (var i in nodelist) {\n      if (nodelist.hasOwnProperty(i)) {\n        scripts.push(nodelist[i])\n      }\n    }\n\n    scripts.forEach( function (oldScript) {\n      var newScript = document.createElement(\"script\");\n      var attrs = [];\n      var nodemap = oldScript.attributes;\n      for (var j in nodemap) {\n        if (nodemap.hasOwnProperty(j)) {\n          attrs.push(nodemap[j])\n        }\n      }\n      attrs.forEach(function(attr) { newScript.setAttribute(attr.name, attr.value) });\n      newScript.appendChild(document.createTextNode(oldScript.innerHTML));\n      oldScript.parentNode.replaceChild(newScript, oldScript);\n    });\n    if (JS_MIME_TYPE in output.data) {\n      toinsert[nchildren-1].children[1].textContent = output.data[JS_MIME_TYPE];\n    }\n    output_area._hv_plot_id = id;\n    if ((window.Bokeh !== undefined) && (id in Bokeh.index)) {\n      window.PyViz.plot_index[id] = Bokeh.index[id];\n    } else {\n      window.PyViz.plot_index[id] = null;\n    }\n  } else if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n    var bk_div = document.createElement(\"div\");\n    bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n    var script_attrs = bk_div.children[0].attributes;\n    for (var i = 0; i < script_attrs.length; i++) {\n      toinsert[toinsert.length - 1].childNodes[1].setAttribute(script_attrs[i].name, script_attrs[i].value);\n    }\n    // store reference to server id on output_area\n    output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n  }\n}\n\n/**\n * Handle when an output is cleared or removed\n */\nfunction handle_clear_output(event, handle) {\n  var id = handle.cell.output_area._hv_plot_id;\n  var server_id = handle.cell.output_area._bokeh_server_id;\n  if (((id === undefined) || !(id in PyViz.plot_index)) && (server_id !== undefined)) { return; }\n  var comm = window.PyViz.comm_manager.get_client_comm(\"hv-extension-comm\", \"hv-extension-comm\", function () {});\n  if (server_id !== null) {\n    comm.send({event_type: 'server_delete', 'id': server_id});\n    return;\n  } else if (comm !== null) {\n    comm.send({event_type: 'delete', 'id': id});\n  }\n  delete PyViz.plot_index[id];\n  if ((window.Bokeh !== undefined) & (id in window.Bokeh.index)) {\n    var doc = window.Bokeh.index[id].model.document\n    doc.clear();\n    const i = window.Bokeh.documents.indexOf(doc);\n    if (i > -1) {\n      window.Bokeh.documents.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Handle kernel restart event\n */\nfunction handle_kernel_cleanup(event, handle) {\n  delete PyViz.comms[\"hv-extension-comm\"];\n  window.PyViz.plot_index = {}\n}\n\n/**\n * Handle update_display_data messages\n */\nfunction handle_update_output(event, handle) {\n  handle_clear_output(event, {cell: {output_area: handle.output_area}})\n  handle_add_output(event, handle)\n}\n\nfunction register_renderer(events, OutputArea) {\n  function append_mime(data, metadata, element) {\n    // create a DOM node to render to\n    var toinsert = this.create_output_subarea(\n    metadata,\n    CLASS_NAME,\n    EXEC_MIME_TYPE\n    );\n    this.keyboard_manager.register_events(toinsert);\n    // Render to node\n    var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n    render(props, toinsert[0]);\n    element.append(toinsert);\n    return toinsert\n  }\n\n  events.on('output_added.OutputArea', handle_add_output);\n  events.on('output_updated.OutputArea', handle_update_output);\n  events.on('clear_output.CodeCell', handle_clear_output);\n  events.on('delete.Cell', handle_clear_output);\n  events.on('kernel_ready.Kernel', handle_kernel_cleanup);\n\n  OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n    safe: true,\n    index: 0\n  });\n}\n\nif (window.Jupyter !== undefined) {\n  try {\n    var events = require('base/js/events');\n    var OutputArea = require('notebook/js/outputarea').OutputArea;\n    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n      register_renderer(events, OutputArea);\n    }\n  } catch(err) {\n  }\n}\n","content_type":"application/vnd.holoviews_load.v0+json"},"application/javascript":{"content":"\nif ((window.PyViz === undefined) || (window.PyViz instanceof HTMLElement)) {\n  window.PyViz = {comms: {}, comm_status:{}, kernels:{}, receivers: {}, plot_index: []}\n}\n\n\n    function JupyterCommManager() {\n    }\n\n    JupyterCommManager.prototype.register_target = function(plot_id, comm_id, msg_handler) {\n      if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {\n        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;\n        comm_manager.register_target(comm_id, function(comm) {\n          comm.on_msg(msg_handler);\n        });\n      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {\n        window.PyViz.kernels[plot_id].registerCommTarget(comm_id, function(comm) {\n          comm.onMsg = msg_handler;\n        });\n      } else if (typeof google != 'undefined' && google.colab.kernel != null) {\n        google.colab.kernel.comms.registerTarget(comm_id, (comm) => {\n          var messages = comm.messages[Symbol.asyncIterator]();\n          function processIteratorResult(result) {\n            var message = result.value;\n            var content = {data: message.data, comm_id};\n            var buffers = []\n            for (var buffer of message.buffers || []) {\n              buffers.push(new DataView(buffer))\n            }\n            var metadata = message.metadata || {};\n            var msg = {content, buffers, metadata}\n            msg_handler(msg);\n            return messages.next().then(processIteratorResult);\n          }\n          return messages.next().then(processIteratorResult);\n        })\n      }\n    }\n\n    JupyterCommManager.prototype.get_client_comm = function(plot_id, comm_id, msg_handler) {\n      if (comm_id in window.PyViz.comms) {\n        return window.PyViz.comms[comm_id];\n      } else if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {\n        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;\n        var comm = comm_manager.new_comm(comm_id, {}, {}, {}, comm_id);\n        if (msg_handler) {\n          comm.on_msg(msg_handler);\n        }\n      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {\n        var comm = window.PyViz.kernels[plot_id].connectToComm(comm_id);\n        let retries = 0;\n        const open = () => {\n          if (comm.active) {\n            comm.open();\n          } else if (retries > 3) {\n            console.warn('Comm target never activated')\n          } else {\n            retries += 1\n            setTimeout(open, 500)\n          }\n        }\n        if (comm.active) {\n          comm.open();\n        } else {\n          setTimeout(open, 500)\n        }\n        if (msg_handler) {\n          comm.onMsg = msg_handler;\n        }\n      } else if (typeof google != 'undefined' && google.colab.kernel != null) {\n        var comm_promise = google.colab.kernel.comms.open(comm_id)\n        comm_promise.then((comm) => {\n          window.PyViz.comms[comm_id] = comm;\n          if (msg_handler) {\n            var messages = comm.messages[Symbol.asyncIterator]();\n            function processIteratorResult(result) {\n              var message = result.value;\n              var content = {data: message.data};\n              var metadata = message.metadata || {comm_id};\n              var msg = {content, metadata}\n              msg_handler(msg);\n              return messages.next().then(processIteratorResult);\n            }\n            return messages.next().then(processIteratorResult);\n          }\n        })\n        var sendClosure = (data, metadata, buffers, disposeOnDone) => {\n          return comm_promise.then((comm) => {\n            comm.send(data, metadata, buffers, disposeOnDone);\n          });\n        };\n        var comm = {\n          send: sendClosure\n        };\n      }\n      window.PyViz.comms[comm_id] = comm;\n      return comm;\n    }\n    window.PyViz.comm_manager = new JupyterCommManager();\n    \n\n\nvar JS_MIME_TYPE = 'application/javascript';\nvar HTML_MIME_TYPE = 'text/html';\nvar EXEC_MIME_TYPE = 'application/vnd.holoviews_exec.v0+json';\nvar CLASS_NAME = 'output';\n\n/**\n * Render data to the DOM node\n */\nfunction render(props, node) {\n  var div = document.createElement(\"div\");\n  var script = document.createElement(\"script\");\n  node.appendChild(div);\n  node.appendChild(script);\n}\n\n/**\n * Handle when a new output is added\n */\nfunction handle_add_output(event, handle) {\n  var output_area = handle.output_area;\n  var output = handle.output;\n  if ((output.data == undefined) || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n    return\n  }\n  var id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n  var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n  if (id !== undefined) {\n    var nchildren = toinsert.length;\n    var html_node = toinsert[nchildren-1].children[0];\n    html_node.innerHTML = output.data[HTML_MIME_TYPE];\n    var scripts = [];\n    var nodelist = html_node.querySelectorAll(\"script\");\n    for (var i in nodelist) {\n      if (nodelist.hasOwnProperty(i)) {\n        scripts.push(nodelist[i])\n      }\n    }\n\n    scripts.forEach( function (oldScript) {\n      var newScript = document.createElement(\"script\");\n      var attrs = [];\n      var nodemap = oldScript.attributes;\n      for (var j in nodemap) {\n        if (nodemap.hasOwnProperty(j)) {\n          attrs.push(nodemap[j])\n        }\n      }\n      attrs.forEach(function(attr) { newScript.setAttribute(attr.name, attr.value) });\n      newScript.appendChild(document.createTextNode(oldScript.innerHTML));\n      oldScript.parentNode.replaceChild(newScript, oldScript);\n    });\n    if (JS_MIME_TYPE in output.data) {\n      toinsert[nchildren-1].children[1].textContent = output.data[JS_MIME_TYPE];\n    }\n    output_area._hv_plot_id = id;\n    if ((window.Bokeh !== undefined) && (id in Bokeh.index)) {\n      window.PyViz.plot_index[id] = Bokeh.index[id];\n    } else {\n      window.PyViz.plot_index[id] = null;\n    }\n  } else if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n    var bk_div = document.createElement(\"div\");\n    bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n    var script_attrs = bk_div.children[0].attributes;\n    for (var i = 0; i < script_attrs.length; i++) {\n      toinsert[toinsert.length - 1].childNodes[1].setAttribute(script_attrs[i].name, script_attrs[i].value);\n    }\n    // store reference to server id on output_area\n    output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n  }\n}\n\n/**\n * Handle when an output is cleared or removed\n */\nfunction handle_clear_output(event, handle) {\n  var id = handle.cell.output_area._hv_plot_id;\n  var server_id = handle.cell.output_area._bokeh_server_id;\n  if (((id === undefined) || !(id in PyViz.plot_index)) && (server_id !== undefined)) { return; }\n  var comm = window.PyViz.comm_manager.get_client_comm(\"hv-extension-comm\", \"hv-extension-comm\", function () {});\n  if (server_id !== null) {\n    comm.send({event_type: 'server_delete', 'id': server_id});\n    return;\n  } else if (comm !== null) {\n    comm.send({event_type: 'delete', 'id': id});\n  }\n  delete PyViz.plot_index[id];\n  if ((window.Bokeh !== undefined) & (id in window.Bokeh.index)) {\n    var doc = window.Bokeh.index[id].model.document\n    doc.clear();\n    const i = window.Bokeh.documents.indexOf(doc);\n    if (i > -1) {\n      window.Bokeh.documents.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Handle kernel restart event\n */\nfunction handle_kernel_cleanup(event, handle) {\n  delete PyViz.comms[\"hv-extension-comm\"];\n  window.PyViz.plot_index = {}\n}\n\n/**\n * Handle update_display_data messages\n */\nfunction handle_update_output(event, handle) {\n  handle_clear_output(event, {cell: {output_area: handle.output_area}})\n  handle_add_output(event, handle)\n}\n\nfunction register_renderer(events, OutputArea) {\n  function append_mime(data, metadata, element) {\n    // create a DOM node to render to\n    var toinsert = this.create_output_subarea(\n    metadata,\n    CLASS_NAME,\n    EXEC_MIME_TYPE\n    );\n    this.keyboard_manager.register_events(toinsert);\n    // Render to node\n    var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n    render(props, toinsert[0]);\n    element.append(toinsert);\n    return toinsert\n  }\n\n  events.on('output_added.OutputArea', handle_add_output);\n  events.on('output_updated.OutputArea', handle_update_output);\n  events.on('clear_output.CodeCell', handle_clear_output);\n  events.on('delete.Cell', handle_clear_output);\n  events.on('kernel_ready.Kernel', handle_kernel_cleanup);\n\n  OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n    safe: true,\n    index: 0\n  });\n}\n\nif (window.Jupyter !== undefined) {\n  try {\n    var events = require('base/js/events');\n    var OutputArea = require('notebook/js/outputarea').OutputArea;\n    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n      register_renderer(events, OutputArea);\n    }\n  } catch(err) {\n  }\n}\n","content_type":"application/javascript"}}},{"output_type":"display_data","metadata":{"application/vnd.holoviews_exec.v0+json":{"id":"3673920e-c0c6-447c-a874-248832788188"}},"data":{"text/html":{"content":"<div id='3673920e-c0c6-447c-a874-248832788188'>\n  <div id=\"e414b90e-cb94-4047-9b80-cd1faf1987bb\" data-root-id=\"3673920e-c0c6-447c-a874-248832788188\" style=\"display: contents;\"></div>\n</div>\n<script type=\"application/javascript\">(function(root) {\n  var docs_json = {\"a0fa90b8-13a4-42ae-8c29-0f8ece1931b5\":{\"version\":\"3.7.3\",\"title\":\"Bokeh Application\",\"roots\":[{\"type\":\"object\",\"name\":\"panel.models.browser.BrowserInfo\",\"id\":\"3673920e-c0c6-447c-a874-248832788188\"},{\"type\":\"object\",\"name\":\"panel.models.comm_manager.CommManager\",\"id\":\"a5296775-6322-4cae-a1bd-5246f89b42aa\",\"attributes\":{\"plot_id\":\"3673920e-c0c6-447c-a874-248832788188\",\"comm_id\":\"b68a6daa27934c30a04e50c6d15d0c4e\",\"client_comm_id\":\"1b782fc651954cba9739a1379cc1779a\"}}],\"defs\":[{\"type\":\"model\",\"name\":\"ReactiveHTML1\"},{\"type\":\"model\",\"name\":\"FlexBox1\",\"properties\":[{\"name\":\"align_content\",\"kind\":\"Any\",\"default\":\"flex-start\"},{\"name\":\"align_items\",\"kind\":\"Any\",\"default\":\"flex-start\"},{\"name\":\"flex_direction\",\"kind\":\"Any\",\"default\":\"row\"},{\"name\":\"flex_wrap\",\"kind\":\"Any\",\"default\":\"wrap\"},{\"name\":\"gap\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"justify_content\",\"kind\":\"Any\",\"default\":\"flex-start\"}]},{\"type\":\"model\",\"name\":\"FloatPanel1\",\"properties\":[{\"name\":\"config\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}},{\"name\":\"contained\",\"kind\":\"Any\",\"default\":true},{\"name\":\"position\",\"kind\":\"Any\",\"default\":\"right-top\"},{\"name\":\"offsetx\",\"kind\":\"Any\",\"default\":null},{\"name\":\"offsety\",\"kind\":\"Any\",\"default\":null},{\"name\":\"theme\",\"kind\":\"Any\",\"default\":\"primary\"},{\"name\":\"status\",\"kind\":\"Any\",\"default\":\"normalized\"}]},{\"type\":\"model\",\"name\":\"GridStack1\",\"properties\":[{\"name\":\"ncols\",\"kind\":\"Any\",\"default\":null},{\"name\":\"nrows\",\"kind\":\"Any\",\"default\":null},{\"name\":\"allow_resize\",\"kind\":\"Any\",\"default\":true},{\"name\":\"allow_drag\",\"kind\":\"Any\",\"default\":true},{\"name\":\"state\",\"kind\":\"Any\",\"default\":[]}]},{\"type\":\"model\",\"name\":\"drag1\",\"properties\":[{\"name\":\"slider_width\",\"kind\":\"Any\",\"default\":5},{\"name\":\"slider_color\",\"kind\":\"Any\",\"default\":\"black\"},{\"name\":\"value\",\"kind\":\"Any\",\"default\":50}]},{\"type\":\"model\",\"name\":\"click1\",\"properties\":[{\"name\":\"terminal_output\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"debug_name\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"clears\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"ReactiveESM1\",\"properties\":[{\"name\":\"esm_constants\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}}]},{\"type\":\"model\",\"name\":\"JSComponent1\",\"properties\":[{\"name\":\"esm_constants\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}}]},{\"type\":\"model\",\"name\":\"ReactComponent1\",\"properties\":[{\"name\":\"use_shadow_dom\",\"kind\":\"Any\",\"default\":true},{\"name\":\"esm_constants\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}}]},{\"type\":\"model\",\"name\":\"AnyWidgetComponent1\",\"properties\":[{\"name\":\"use_shadow_dom\",\"kind\":\"Any\",\"default\":true},{\"name\":\"esm_constants\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}}]},{\"type\":\"model\",\"name\":\"FastWrapper1\",\"properties\":[{\"name\":\"object\",\"kind\":\"Any\",\"default\":null},{\"name\":\"style\",\"kind\":\"Any\",\"default\":null}]},{\"type\":\"model\",\"name\":\"NotificationArea1\",\"properties\":[{\"name\":\"js_events\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}},{\"name\":\"max_notifications\",\"kind\":\"Any\",\"default\":5},{\"name\":\"notifications\",\"kind\":\"Any\",\"default\":[]},{\"name\":\"position\",\"kind\":\"Any\",\"default\":\"bottom-right\"},{\"name\":\"_clear\",\"kind\":\"Any\",\"default\":0},{\"name\":\"types\",\"kind\":\"Any\",\"default\":[{\"type\":\"map\",\"entries\":[[\"type\",\"warning\"],[\"background\",\"#ffc107\"],[\"icon\",{\"type\":\"map\",\"entries\":[[\"className\",\"fas fa-exclamation-triangle\"],[\"tagName\",\"i\"],[\"color\",\"white\"]]}]]},{\"type\":\"map\",\"entries\":[[\"type\",\"info\"],[\"background\",\"#007bff\"],[\"icon\",{\"type\":\"map\",\"entries\":[[\"className\",\"fas fa-info-circle\"],[\"tagName\",\"i\"],[\"color\",\"white\"]]}]]}]}]},{\"type\":\"model\",\"name\":\"Notification\",\"properties\":[{\"name\":\"background\",\"kind\":\"Any\",\"default\":null},{\"name\":\"duration\",\"kind\":\"Any\",\"default\":3000},{\"name\":\"icon\",\"kind\":\"Any\",\"default\":null},{\"name\":\"message\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"notification_type\",\"kind\":\"Any\",\"default\":null},{\"name\":\"_rendered\",\"kind\":\"Any\",\"default\":false},{\"name\":\"_destroyed\",\"kind\":\"Any\",\"default\":false}]},{\"type\":\"model\",\"name\":\"TemplateActions1\",\"properties\":[{\"name\":\"open_modal\",\"kind\":\"Any\",\"default\":0},{\"name\":\"close_modal\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"BootstrapTemplateActions1\",\"properties\":[{\"name\":\"open_modal\",\"kind\":\"Any\",\"default\":0},{\"name\":\"close_modal\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"TemplateEditor1\",\"properties\":[{\"name\":\"layout\",\"kind\":\"Any\",\"default\":[]}]},{\"type\":\"model\",\"name\":\"MaterialTemplateActions1\",\"properties\":[{\"name\":\"open_modal\",\"kind\":\"Any\",\"default\":0},{\"name\":\"close_modal\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"request_value1\",\"properties\":[{\"name\":\"fill\",\"kind\":\"Any\",\"default\":\"none\"},{\"name\":\"_synced\",\"kind\":\"Any\",\"default\":null},{\"name\":\"_request_sync\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"holoviews.plotting.bokeh.raster.HoverModel\",\"properties\":[{\"name\":\"xy\",\"kind\":\"Any\",\"default\":null},{\"name\":\"data\",\"kind\":\"Any\",\"default\":null}]}]}};\n  var render_items = [{\"docid\":\"a0fa90b8-13a4-42ae-8c29-0f8ece1931b5\",\"roots\":{\"3673920e-c0c6-447c-a874-248832788188\":\"e414b90e-cb94-4047-9b80-cd1faf1987bb\"},\"root_ids\":[\"3673920e-c0c6-447c-a874-248832788188\"]}];\n  var docs = Object.values(docs_json)\n  if (!docs) {\n    return\n  }\n  const py_version = docs[0].version.replace('rc', '-rc.').replace('.dev', '-dev.')\n  async function embed_document(root) {\n    var Bokeh = get_bokeh(root)\n    await Bokeh.embed.embed_items_notebook(docs_json, render_items);\n    for (const render_item of render_items) {\n      for (const root_id of render_item.root_ids) {\n\tconst id_el = document.getElementById(root_id)\n\tif (id_el.children.length && id_el.children[0].hasAttribute('data-root-id')) {\n\t  const root_el = id_el.children[0]\n\t  root_el.id = root_el.id + '-rendered'\n\t  for (const child of root_el.children) {\n            // Ensure JupyterLab does not capture keyboard shortcuts\n            // see: https://jupyterlab.readthedocs.io/en/4.1.x/extension/notebook.html#keyboard-interaction-model\n\t    child.setAttribute('data-lm-suppress-shortcuts', 'true')\n\t  }\n\t}\n      }\n    }\n  }\n  function get_bokeh(root) {\n    if (root.Bokeh === undefined) {\n      return null\n    } else if (root.Bokeh.version !== py_version) {\n      if (root.Bokeh.versions === undefined || !root.Bokeh.versions.has(py_version)) {\n\treturn null\n      }\n      return root.Bokeh.versions.get(py_version);\n    } else if (root.Bokeh.version === py_version) {\n      return root.Bokeh\n    }\n    return null\n  }\n  function is_loaded(root) {\n    var Bokeh = get_bokeh(root)\n    return (Bokeh != null && Bokeh.Panel !== undefined)\n  }\n  if (is_loaded(root)) {\n    embed_document(root);\n  } else {\n    var attempts = 0;\n    var timer = setInterval(function(root) {\n      if (is_loaded(root)) {\n        clearInterval(timer);\n        embed_document(root);\n      } else if (document.readyState == \"complete\") {\n        attempts++;\n        if (attempts > 200) {\n          clearInterval(timer);\n\t  var Bokeh = get_bokeh(root)\n\t  if (Bokeh == null || Bokeh.Panel == null) {\n            console.warn(\"Panel: ERROR: Unable to run Panel code because Bokeh or Panel library is missing\");\n\t  } else {\n\t    console.warn(\"Panel: WARNING: Attempting to render but not all required libraries could be resolved.\")\n\t    embed_document(root)\n\t  }\n        }\n      }\n    }, 25, root)\n  }\n})(window);</script>","content_type":"text/html"},"application/vnd.holoviews_exec.v0+json":{"content":"","content_type":"application/vnd.holoviews_exec.v0+json"}}}],"key":"JdqKqm6Lv2"}],"key":"H7Fnb5dDKm"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Sea surface height anomaly","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PjE7bFwd44"}],"identifier":"sea-surface-height-anomaly","label":"Sea surface height anomaly","html_id":"sea-surface-height-anomaly","implicit":true,"key":"Vx8sPavuQH"}],"key":"LXcgvlSoCW"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Let’s look for some sea surface height anomaly data for the Western Tropical Atlantic. In order to access it, we will use the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WVVTMErHT8"},{"type":"inlineCode","value":"earthaccess","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BWTc4jp596"},{"type":"text","value":" python library. It is used to make it easier for the user to find, stream and download NASA Earth Science data. More information about this library can be found in their ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FLOwScOUGy"},{"type":"link","url":"https://earthaccess.readthedocs.io/en/latest/","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"documentation page","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QCwq9mIdiC"}],"urlSource":"https://earthaccess.readthedocs.io/en/latest/","key":"OeEnHtWzGu"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cdf1hTwQT4"},{"type":"link","url":"https://github.com/nsidc/earthaccess","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Github repository","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"so0DqwkfM2"}],"urlSource":"https://github.com/nsidc/earthaccess","error":true,"key":"DetUKMQOqg"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XuqU0lIgme"}],"key":"sbNYAEMGCJ"}],"key":"ZYErmk8lcj"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Registering for an Earthdata account and authenticating","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tOBe3IxseV"}],"identifier":"registering-for-an-earthdata-account-and-authenticating","label":"Registering for an Earthdata account and authenticating","html_id":"registering-for-an-earthdata-account-and-authenticating","implicit":true,"key":"YNIeyjd4m5"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Before searching for data, it is necessary to register for an Earthdata login profile, which can be done easily and quickly ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZIknaP9nU6"},{"type":"link","url":"https://urs.earthdata.nasa.gov/documentation/for_users/how_to_register","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"this way","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QvAPnDKRTg"}],"urlSource":"https://urs.earthdata.nasa.gov/documentation/for_users/how_to_register","key":"POFo82OMSg"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"a9XIUTL73t"}],"key":"Y13B2RaMsD"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"After registering, earthaccess has to authenticate you as a user. There are a few ways to do that, as stated ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"okI2GOvzma"},{"type":"link","url":"https://earthaccess.readthedocs.io/en/latest/user-reference/api/api/#earthaccess.api.login","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"qrBEOblQfi"}],"urlSource":"https://earthaccess.readthedocs.io/en/latest/user-reference/api/api/#earthaccess.api.login","key":"PrG9FbiBb0"},{"type":"text","value":". The easiest way of doing is just executing ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Q2E3hKISvQ"},{"type":"inlineCode","value":"auth = earthaccess.login()","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"RNwnfleoEZ"},{"type":"text","value":" in your jupyter notebook, and that would prompt for input of the username and password for the user.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Qs7ORMgdXv"}],"key":"s5CWk2pM8A"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"For the purposes of this demonstration we have environment variables that will be used for authentication. So you just need to execute the cell below:","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"aiYGYmQy7f"}],"key":"zYen8CgTXo"}],"key":"TbBjpQOPIO"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"auth = earthaccess.login(strategy=\"environmnent\")","key":"etqnZKnPdx"},{"type":"output","id":"DBiNgYoXk5hZwB-6R1yM_","data":[],"key":"NGIkZxQfNX"}],"key":"srNFlxeeQ7"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"After it is authenticated, we are ready to start our search for data!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PTyxNYmgDx"}],"key":"KTBiYaYUXm"}],"key":"AKBgevavhP"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Searching and accessing the data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QSXENu2tGx"}],"identifier":"searching-and-accessing-the-data","label":"Searching and accessing the data","html_id":"searching-and-accessing-the-data","implicit":true,"key":"yccBdYT2UK"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"inlineCode","value":"earthaccess","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"BKoWJrXwLn"},{"type":"text","value":" allows us to look for datasets (called ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"wn01xKilkx"},{"type":"inlineCode","value":"DataCollections","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DOjzywtQSk"},{"type":"text","value":") and specific data files (called ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TYGJjSlvKn"},{"type":"inlineCode","value":"DataGranules","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xrpqvrA5VZ"},{"type":"text","value":"). To look for them, we need some criteria in order to perform the search. Here we will use","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pvzlF79mOW"}],"key":"yfFKIOCEfV"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"a shortname, which is a dataset identifier;","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"wdlkPFz3Xy"}],"key":"rJZqisPD7V"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"a temporal window: we want data between those dates; and","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"dXa3eQOuxe"}],"key":"N1OzYoaJvE"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"a bounding box: we want data within that area.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"i7V451bEpH"}],"key":"IE5QQbgtqP"}],"key":"I6b1RUz0Xh"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"One good way to get a better understanding of what to look for is visiting the ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"DMssaJ8Zpa"},{"type":"link","url":"https://search.earthdata.nasa.gov/search","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Earthdata Search website","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"KZafZTN67W"}],"urlSource":"https://search.earthdata.nasa.gov/search","key":"HlVxTn8igu"},{"type":"text","value":". There you can search by keywords and select filters to see which data could be helpful in your research. Once you find a dataset (","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"oFwk0VGNhE"},{"type":"emphasis","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Collection","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"SeAF7bGXHJ"}],"key":"l9MHRWY4zQ"},{"type":"text","value":") that interests you, you click on its name. Below we show an example in which the “MEaSUREs Gridded Sea Surface Height Anomalies Version 2205” is the dataset of interest.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"jwComXLhFT"}],"key":"gL2EvzKq3s"}],"key":"vzCgCrhQDV"},{"type":"block","kind":"notebook-content","children":[{"type":"image","url":"/api-cookbook/build/earthdata_find_colle-1ba6461da835ca2d7a5179aaaa9d8de7.png","alt":"Find Collection","title":"Image from the Earthdata Search website showing a list of data collections and the 'MEaSUREsn Gridded Sea Surface Height Anomalies Version 2205' collection highlighted.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jLjdcienXW","urlSource":"../images/earthdata_find_collection.png"}],"key":"IuTQ7o64aM"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"After clicking on the dataset name, you click on ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XCxCNPqjqe"},{"type":"inlineCode","value":"Collection Details","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QPfRvM8lTF"},{"type":"text","value":", which will send you to a page that has more information about the dataset.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WsrQXUB86E"}],"key":"bUaqvoNtRt"}],"key":"rJmK77X5j9"},{"type":"block","kind":"notebook-content","children":[{"type":"image","url":"/api-cookbook/build/earthdata_collection-c56890f769a7b8399ece8dd72f6d9dd4.png","alt":"Collection details","title":"Image from the Earthdata Search website showing a list of granules from the 'MEaSUREsn Gridded Sea Surface Height Anomalies Version 2205' collection, and indicating to click on the 'Collection Details' button on the top right of the screen.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"phKItkB12M","urlSource":"../images/earthdata_collection_details.png"}],"key":"ZWeepnsIeP"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Feel free to read the details about the dataset, to make sure that’s what would help you in your work. If so, copy the name, usually all in caps, that is shown inside a light gray box on the top of the page. That is the identifier for that specific dataset. That’s the main information we’ll need to provide ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"W9H4Z8LkXX"},{"type":"inlineCode","value":"earthaccess","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Mz2H87QTRM"},{"type":"text","value":" library to search for it.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"G0c6Favwll"}],"key":"lSbdzB4EFW"}],"key":"h161Tjizof"},{"type":"block","kind":"notebook-content","children":[{"type":"image","url":"/api-cookbook/build/earthdata_shortname-87d735355abf1de22a6dbafa947fd2d1.png","alt":"Shortname","title":"Image from the Earthdata Search website showing the details of the 'MEaSUREs Gridded Sea Surface Height Anomalies Version 2205' data collection, indicating the name 'SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205' as the short name for this particular dataset.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Hd6FEnMwCv","urlSource":"../images/earthdata_shortname.png"}],"key":"JwyMwN9jVG"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now that we have an identifier for the dataset we want to access, let’s use ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"u7n5l3ZeoB"},{"type":"inlineCode","value":"earthaccess","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ylAhTxJGJW"},{"type":"text","value":" to find sea surface height anomaly data in September and October, 2020, in the Western Tropical Atlantic:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nQc7ATujBO"}],"key":"ZOusGG9bd1"}],"key":"OJE91GHZyY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# specify the bounding box for the Western Tropical Atlantic\nlonmin, latmin, lonmax, latmax = -70, -5, -45, 20\n\n# https://search.earthdata.nasa.gov/search/granules/collection-details?p=C2270392799-POCLOUD&pg%5B0%5D%5Bv%5D=f&pg%5B0%5D%5Bgsk%5D=-start_date&as%5Bscience_keywords%5D%5B0%5D=Oceans%3ASea%20Surface%20Topography%3ASea%20Level%3ASea%20Level%20Anomaly&tl=1718059227%213%21%21&fsm0=Sea%20Surface%20Topography&fst0=Oceans&fst1=Oceans&fsm1=Sea%20Surface%20Topography&fs11=Sea%20Level&fs21=Sea%20Level%20Anomaly&fpb0=Space-based%20Platforms&long=-0.0703125\nsla_shortname = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n\nsla_results = earthaccess.search_data(\n    short_name=sla_shortname,\n    cloud_hosted=True,\n    temporal=(\"2020-09-01\", \"2020-10-30\"),\n    bounding_box=(lonmin, latmin, lonmax, latmax)\n)","key":"GaVWsqoGEw"},{"type":"output","id":"fX3anOqnochZjzCZZ_HGJ","data":[],"key":"N5JSN06ifF"}],"key":"y96OaPyhRg"},{"type":"block","kind":"notebook-content","children":[{"type":"div","class":"admonition alert alert-info","children":[{"type":"paragraph","children":[{"type":"text","value":"Info","key":"zZpwX51DiL"}],"key":"FNFfW8C5S5"},{"type":"text","value":"Note: not all these arguments are necessary, but the more arguments you use, the more refined the search will be. More info ","key":"gy3P5rv2jw"},{"type":"link","url":"https://earthaccess.readthedocs.io/en/latest/user-reference/api/api/#earthaccess.api.search_data","children":[{"type":"text","value":"here.","key":"dWrBEysgvT"}],"urlSource":"https://earthaccess.readthedocs.io/en/latest/user-reference/api/api/#earthaccess.api.search_data","key":"kabKeEaxrP"}],"key":"amZ6dvDI4w"}],"key":"tZCA333rnI"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The function ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hE2EiNiVnq"},{"type":"inlineCode","value":"search_data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zfJr31eWiA"},{"type":"text","value":" returns a list with the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AcDyz8Zk6G"},{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Granules","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oGfRkZD48L"}],"key":"XUcOucS53F"},{"type":"text","value":" found. Here we can think of Granules as files, or time-steps. Great, we found some that match our criteria. Now, let’s take a look at one of them:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dh7UdEyLv8"}],"key":"ZAu1SpzjLk"}],"key":"d3Cl5nD6S1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"dict(sla_results[0])","key":"VURBpBo7L8"},{"type":"output","id":"Dfca38gLh6DslHxMYPuVO","data":[{"output_type":"execute_result","execution_count":4,"metadata":{},"data":{"text/plain":{"content":"{'meta': {'concept-type': 'granule',\n  'concept-id': 'G2546521666-POCLOUD',\n  'revision-id': 2,\n  'native-id': 'ssh_grids_v2205_2020090312',\n  'collection-concept-id': 'C2270392799-POCLOUD',\n  'provider-id': 'POCLOUD',\n  'format': 'application/vnd.nasa.cmr.umm+json',\n  'revision-date': '2023-01-11T00:46:27.402Z'},\n 'umm': {'TemporalExtent': {'RangeDateTime': {'EndingDateTime': '2020-09-03T00:00:00.000Z',\n    'BeginningDateTime': '2020-09-03T00:00:00.000Z'}},\n  'MetadataSpecification': {'URL': 'https://cdn.earthdata.nasa.gov/umm/granule/v1.6.6',\n   'Name': 'UMM-G',\n   'Version': '1.6.6'},\n  'GranuleUR': 'ssh_grids_v2205_2020090312',\n  'ProviderDates': [{'Type': 'Insert', 'Date': '2023-01-11T00:46:13.101Z'},\n   {'Type': 'Update', 'Date': '2023-01-11T00:46:13.101Z'}],\n  'SpatialExtent': {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.083,\n       'SouthBoundingCoordinate': -79.917,\n       'EastBoundingCoordinate': 180,\n       'NorthBoundingCoordinate': 79.917},\n      {'WestBoundingCoordinate': -180,\n       'SouthBoundingCoordinate': -79.917,\n       'EastBoundingCoordinate': -0.083,\n       'NorthBoundingCoordinate': 79.917}]}}},\n  'DataGranule': {'ArchiveAndDistributionInformation': [{'SizeUnit': 'MB',\n     'Size': 6.008148193359375e-05,\n     'Checksum': {'Value': 'b7f746e1fb6144077093484b57c2e8d0',\n      'Algorithm': 'MD5'},\n     'SizeInBytes': 63,\n     'Name': 'ssh_grids_v2205_2020090312.nc.md5'},\n    {'SizeUnit': 'MB',\n     'Size': 9.23438549041748,\n     'Checksum': {'Value': 'a0befc8ed6ad7cc74d8c4a73f30d2db6',\n      'Algorithm': 'MD5'},\n     'SizeInBytes': 9682955,\n     'Name': 'ssh_grids_v2205_2020090312.nc'}],\n   'DayNightFlag': 'Unspecified',\n   'ProductionDateTime': '2022-10-30T20:57:45.862Z'},\n  'CollectionReference': {'Version': '2205',\n   'ShortName': 'SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205'},\n  'RelatedUrls': [{'URL': 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-public/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020090312.nc.md5',\n    'Description': 'Download ssh_grids_v2205_2020090312.nc.md5',\n    'Type': 'EXTENDED METADATA'},\n   {'URL': 's3://podaac-ops-cumulus-public/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020090312.nc.md5',\n    'Description': 'This link provides direct download access via S3 to the granule',\n    'Type': 'EXTENDED METADATA'},\n   {'URL': 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020090312.nc',\n    'Description': 'Download ssh_grids_v2205_2020090312.nc',\n    'Type': 'GET DATA'},\n   {'URL': 's3://podaac-ops-cumulus-protected/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020090312.nc',\n    'Description': 'This link provides direct download access via S3 to the granule',\n    'Type': 'GET DATA VIA DIRECT ACCESS'},\n   {'URL': 'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n    'Description': 'api endpoint to retrieve temporary credentials valid for same-region direct s3 access',\n    'Type': 'VIEW RELATED INFORMATION'},\n   {'URL': 'https://opendap.earthdata.nasa.gov/collections/C2270392799-POCLOUD/granules/ssh_grids_v2205_2020090312',\n    'Type': 'USE SERVICE API',\n    'Subtype': 'OPENDAP DATA',\n    'Description': 'OPeNDAP request URL'}]},\n 'size': 9.234445571899414}","content_type":"text/plain"}}}],"key":"MSbVJtMPY3"}],"key":"P1gVrTJvOJ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"So here we have all the metadata information about this first Granule. You can also check all the Granules from the list, if you’d like to make sure they are all of interest to you:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Bsm6eCu7DM"}],"key":"zot10Xc2UA"}],"key":"Z6V63IG8Kp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"sla_results ","key":"LMAn7qRYkb"},{"type":"output","id":"PahIoosh4vIFS-jE7KKCU","data":[{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"text/plain":{"content":"[Collection: {'Version': '2205', 'ShortName': 'SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205'}\n Spatial coverage: {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.083, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': 180, 'NorthBoundingCoordinate': 79.917}, {'WestBoundingCoordinate': -180, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': -0.083, 'NorthBoundingCoordinate': 79.917}]}}}\n Temporal coverage: {'RangeDateTime': {'EndingDateTime': '2020-09-03T00:00:00.000Z', 'BeginningDateTime': '2020-09-03T00:00:00.000Z'}}\n Size(MB): 9.234445571899414\n Data: ['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020090312.nc'],\n Collection: {'Version': '2205', 'ShortName': 'SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205'}\n Spatial coverage: {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.083, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': 180, 'NorthBoundingCoordinate': 79.917}, {'WestBoundingCoordinate': -180, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': -0.083, 'NorthBoundingCoordinate': 79.917}]}}}\n Temporal coverage: {'RangeDateTime': {'EndingDateTime': '2020-09-08T00:00:00.000Z', 'BeginningDateTime': '2020-09-08T00:00:00.000Z'}}\n Size(MB): 9.23195743560791\n Data: ['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020090812.nc'],\n Collection: {'Version': '2205', 'ShortName': 'SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205'}\n Spatial coverage: {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.083, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': 180, 'NorthBoundingCoordinate': 79.917}, {'WestBoundingCoordinate': -180, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': -0.083, 'NorthBoundingCoordinate': 79.917}]}}}\n Temporal coverage: {'RangeDateTime': {'EndingDateTime': '2020-09-13T00:00:00.000Z', 'BeginningDateTime': '2020-09-13T00:00:00.000Z'}}\n Size(MB): 9.228601455688477\n Data: ['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020091312.nc'],\n Collection: {'Version': '2205', 'ShortName': 'SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205'}\n Spatial coverage: {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.083, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': 180, 'NorthBoundingCoordinate': 79.917}, {'WestBoundingCoordinate': -180, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': -0.083, 'NorthBoundingCoordinate': 79.917}]}}}\n Temporal coverage: {'RangeDateTime': {'EndingDateTime': '2020-09-18T00:00:00.000Z', 'BeginningDateTime': '2020-09-18T00:00:00.000Z'}}\n Size(MB): 9.222516059875488\n Data: ['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020091812.nc'],\n Collection: {'Version': '2205', 'ShortName': 'SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205'}\n Spatial coverage: {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.083, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': 180, 'NorthBoundingCoordinate': 79.917}, {'WestBoundingCoordinate': -180, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': -0.083, 'NorthBoundingCoordinate': 79.917}]}}}\n Temporal coverage: {'RangeDateTime': {'EndingDateTime': '2020-09-23T00:00:00.000Z', 'BeginningDateTime': '2020-09-23T00:00:00.000Z'}}\n Size(MB): 9.217610359191895\n Data: ['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020092312.nc'],\n Collection: {'Version': '2205', 'ShortName': 'SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205'}\n Spatial coverage: {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.083, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': 180, 'NorthBoundingCoordinate': 79.917}, {'WestBoundingCoordinate': -180, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': -0.083, 'NorthBoundingCoordinate': 79.917}]}}}\n Temporal coverage: {'RangeDateTime': {'EndingDateTime': '2020-09-28T00:00:00.000Z', 'BeginningDateTime': '2020-09-28T00:00:00.000Z'}}\n Size(MB): 9.21416187286377\n Data: ['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020092812.nc'],\n Collection: {'Version': '2205', 'ShortName': 'SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205'}\n Spatial coverage: {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.083, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': 180, 'NorthBoundingCoordinate': 79.917}, {'WestBoundingCoordinate': -180, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': -0.083, 'NorthBoundingCoordinate': 79.917}]}}}\n Temporal coverage: {'RangeDateTime': {'EndingDateTime': '2020-10-03T00:00:00.000Z', 'BeginningDateTime': '2020-10-03T00:00:00.000Z'}}\n Size(MB): 9.206094741821289\n Data: ['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020100312.nc'],\n Collection: {'Version': '2205', 'ShortName': 'SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205'}\n Spatial coverage: {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.083, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': 180, 'NorthBoundingCoordinate': 79.917}, {'WestBoundingCoordinate': -180, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': -0.083, 'NorthBoundingCoordinate': 79.917}]}}}\n Temporal coverage: {'RangeDateTime': {'EndingDateTime': '2020-10-08T00:00:00.000Z', 'BeginningDateTime': '2020-10-08T00:00:00.000Z'}}\n Size(MB): 9.205072402954102\n Data: ['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020100812.nc'],\n Collection: {'Version': '2205', 'ShortName': 'SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205'}\n Spatial coverage: {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.083, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': 180, 'NorthBoundingCoordinate': 79.917}, {'WestBoundingCoordinate': -180, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': -0.083, 'NorthBoundingCoordinate': 79.917}]}}}\n Temporal coverage: {'RangeDateTime': {'EndingDateTime': '2020-10-13T00:00:00.000Z', 'BeginningDateTime': '2020-10-13T00:00:00.000Z'}}\n Size(MB): 9.207045555114746\n Data: ['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020101312.nc'],\n Collection: {'Version': '2205', 'ShortName': 'SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205'}\n Spatial coverage: {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.083, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': 180, 'NorthBoundingCoordinate': 79.917}, {'WestBoundingCoordinate': -180, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': -0.083, 'NorthBoundingCoordinate': 79.917}]}}}\n Temporal coverage: {'RangeDateTime': {'EndingDateTime': '2020-10-18T00:00:00.000Z', 'BeginningDateTime': '2020-10-18T00:00:00.000Z'}}\n Size(MB): 9.204651832580566\n Data: ['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020101812.nc'],\n Collection: {'Version': '2205', 'ShortName': 'SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205'}\n Spatial coverage: {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.083, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': 180, 'NorthBoundingCoordinate': 79.917}, {'WestBoundingCoordinate': -180, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': -0.083, 'NorthBoundingCoordinate': 79.917}]}}}\n Temporal coverage: {'RangeDateTime': {'EndingDateTime': '2020-10-23T00:00:00.000Z', 'BeginningDateTime': '2020-10-23T00:00:00.000Z'}}\n Size(MB): 9.210223197937012\n Data: ['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020102312.nc'],\n Collection: {'Version': '2205', 'ShortName': 'SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205'}\n Spatial coverage: {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.083, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': 180, 'NorthBoundingCoordinate': 79.917}, {'WestBoundingCoordinate': -180, 'SouthBoundingCoordinate': -79.917, 'EastBoundingCoordinate': -0.083, 'NorthBoundingCoordinate': 79.917}]}}}\n Temporal coverage: {'RangeDateTime': {'EndingDateTime': '2020-10-28T00:00:00.000Z', 'BeginningDateTime': '2020-10-28T00:00:00.000Z'}}\n Size(MB): 9.219075202941895\n Data: ['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205/ssh_grids_v2205_2020102812.nc']]","content_type":"text/plain"}}}],"key":"y8po1uIcTQ"}],"key":"z2eLB6rxmR"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"OK, we found some results that interest us. Now let’s access them!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pQiVr4cJZx"}],"key":"cseATjBeFp"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Two possibly important limiting factors for research are limited computing capacity and limited data storage. Even if data storage is not very limited, unecessarily working with large files is not best practice. So here we’ll not download the data; we’ll stream it instead, using ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"k11Nsk2UVa"},{"type":"link","url":"https://docs.xarray.dev/en/stable/","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"xarray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZCGtXBagGo"}],"urlSource":"https://docs.xarray.dev/en/stable/","key":"QVEZCRuY1w"},{"type":"text","value":". Through xarray we can take a look at the data, subset, perform some analyses and, only if we are certain that we want to look further into it, download the data.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Awc1xDpLY4"}],"key":"H2QUoVpY4e"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"So let’s start by opening the data Granules as a dataset with xarray. This can take some time, depending on your system.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"pi9joBbgv1"}],"key":"gHby9kWhPD"}],"key":"AkSUGRADlk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time \nsla_ds = xr.open_mfdataset(earthaccess.open(sla_results))\nsla_ds","key":"hIg8NSmudn"},{"type":"output","id":"ZX6PZb23tAXLC4oOejt-y","data":[{"output_type":"stream","name":"stderr","text":"\rQUEUEING TASKS | :   0%|          | 0/12 [00:00<?, ?it/s]"},{"output_type":"stream","name":"stderr","text":"\rQUEUEING TASKS | : 100%|██████████| 12/12 [00:00<00:00, 4159.98it/s]"},{"output_type":"stream","name":"stderr","text":"\n"},{"output_type":"stream","name":"stderr","text":"\rPROCESSING TASKS | :   0%|          | 0/12 [00:00<?, ?it/s]"},{"output_type":"stream","name":"stderr","text":"\rPROCESSING TASKS | :   8%|▊         | 1/12 [00:01<00:11,  1.09s/it]"},{"output_type":"stream","name":"stderr","text":"\rPROCESSING TASKS | :  33%|███▎      | 4/12 [00:01<00:02,  4.00it/s]"},{"output_type":"stream","name":"stderr","text":"\rPROCESSING TASKS | :  75%|███████▌  | 9/12 [00:02<00:00,  5.09it/s]"},{"output_type":"stream","name":"stderr","text":"\rPROCESSING TASKS | : 100%|██████████| 12/12 [00:02<00:00,  6.21it/s]"},{"output_type":"stream","name":"stderr","text":"\rPROCESSING TASKS | : 100%|██████████| 12/12 [00:02<00:00,  5.02it/s]"},{"output_type":"stream","name":"stderr","text":"\n"},{"output_type":"stream","name":"stderr","text":"\rCOLLECTING RESULTS | :   0%|          | 0/12 [00:00<?, ?it/s]"},{"output_type":"stream","name":"stderr","text":"\rCOLLECTING RESULTS | : 100%|██████████| 12/12 [00:00<00:00, 157779.46it/s]"},{"output_type":"stream","name":"stderr","text":"\n"},{"output_type":"stream","name":"stdout","text":"CPU times: user 1.29 s, sys: 168 ms, total: 1.46 s\nWall time: 34.8 s\n"},{"output_type":"execute_result","execution_count":6,"metadata":{},"data":{"text/plain":{"content":"<xarray.Dataset> Size: 199MB\nDimensions:      (Time: 12, Longitude: 2160, nv: 2, Latitude: 960)\nCoordinates:\n  * Longitude    (Longitude) float32 9kB 0.08333 0.25 0.4167 ... 359.8 359.9\n  * Latitude     (Latitude) float32 4kB -79.92 -79.75 -79.58 ... 79.75 79.92\n  * Time         (Time) datetime64[ns] 96B 2020-09-03T12:00:00 ... 2020-10-28...\nDimensions without coordinates: nv\nData variables:\n    Lon_bounds   (Time, Longitude, nv) float32 207kB dask.array<chunksize=(1, 2160, 2), meta=np.ndarray>\n    Lat_bounds   (Time, Latitude, nv) float32 92kB dask.array<chunksize=(1, 960, 2), meta=np.ndarray>\n    Time_bounds  (Time, nv) datetime64[ns] 192B dask.array<chunksize=(1, 2), meta=np.ndarray>\n    SLA          (Time, Latitude, Longitude) float32 100MB dask.array<chunksize=(1, 960, 2160), meta=np.ndarray>\n    SLA_ERR      (Time, Latitude, Longitude) float32 100MB dask.array<chunksize=(1, 960, 2160), meta=np.ndarray>\nAttributes: (12/21)\n    Conventions:            CF-1.6\n    ncei_template_version:  NCEI_NetCDF_Grid_Template_v2.0\n    Institution:            Jet Propulsion Laboratory\n    geospatial_lat_min:     -79.916664\n    geospatial_lat_max:     79.916664\n    geospatial_lon_min:     0.083333336\n    ...                     ...\n    version_number:         2205\n    Data_Pnts_Each_Sat:     {\"16\": 728440, \"1007\": 702669}\n    source_version:         commit ad8fdfbffc5581946ae8e9ea13699e2d6dcadba9\n    SLA_Global_MEAN:        0.06743581712198123\n    SLA_Global_STD:         0.09305447947672979\n    latency:                final","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"96c65a986fbf61ff83e9afd4ecef08e6","path":"/api-cookbook/build/96c65a986fbf61ff83e9afd4ecef08e6.html"}}}],"key":"HUKXwhMpLY"}],"key":"iRYCA9EayL"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Subsetting the data, adjusting the coordinates and assigning attributes","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OT1IAJXB8O"}],"identifier":"subsetting-the-data-adjusting-the-coordinates-and-assigning-attributes","label":"Subsetting the data, adjusting the coordinates and assigning attributes","html_id":"subsetting-the-data-adjusting-the-coordinates-and-assigning-attributes","implicit":true,"key":"tiCnTSs3mJ"}],"key":"EIk6SN8ShN"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If we take a look at the loaded dataset, we notice a few things:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zTswhOgMpr"}],"key":"K9YkqexRQo"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":2,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"The search yielded 12 granules, so we have 12 time-steps in the resulting dataset","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"MEmWtdr0Qq"}],"key":"B1c0Gpkeft"},{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"sEHnM1qtAK"},{"type":"inlineCode","value":"Latitude","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"KExnFX3q80"},{"type":"text","value":" and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"oy6lFhBkMy"},{"type":"inlineCode","value":"Longitude","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lERQamIpAR"},{"type":"text","value":" span a much greater area than requested in the search. The dataset loaded contains the area that we requested, plus much more.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zL5P7zask3"}],"key":"cuAkn5K57V"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"we have a few data variables besides ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"ze5dJdJ8av"},{"type":"inlineCode","value":"SLA","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"L406uDg9zr"},{"type":"text","value":" (Sea Level Anomaly Estimate)","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"YRrvgXLaZT"}],"key":"Crmwx6UL3P"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"VnB4etyGLo"},{"type":"inlineCode","value":"Longitude","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"uXcv0jeLbk"},{"type":"text","value":" coordinate goes from 0 to 360 instead of from -180 to 180.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ZXmjEkleQJ"}],"key":"HUYPW9DwM7"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"there are multiple attributes. Those are very important, since they contain dataset metadata information.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"AUGbfr6mDR"}],"key":"kN0z8EMotI"}],"key":"dcWAsaZC0k"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"That being said, we need to do a few things to make this dataset ready for analysis, visualization, and/or download.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"xMgXSEIAt6"}],"key":"h4bWryPYrD"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"The first thing to do is to adjust the ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"tQoOPVb6Hz"},{"type":"inlineCode","value":"Longitude","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"YNkWh3XtrB"},{"type":"text","value":" coordinates and sort the data accordingly:","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"a7UBsp0MUN"}],"key":"PDmFpy2Mqj"}],"key":"FOg7Ae3WGK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# convert Longitude from 0-360 to -180-180\nsla_ds.coords['Longitude'] = (sla_ds.coords['Longitude'] + 180) % 360 - 180\nsla_ds = sla_ds.sortby(sla_ds.Longitude)\nsla_ds","key":"Qri3JFC5Ps"},{"type":"output","id":"Akl-aIqcE18Kcd7VA5sSN","data":[{"output_type":"execute_result","execution_count":7,"metadata":{},"data":{"text/plain":{"content":"<xarray.Dataset> Size: 199MB\nDimensions:      (Time: 12, Longitude: 2160, nv: 2, Latitude: 960)\nCoordinates:\n  * Latitude     (Latitude) float32 4kB -79.92 -79.75 -79.58 ... 79.75 79.92\n  * Time         (Time) datetime64[ns] 96B 2020-09-03T12:00:00 ... 2020-10-28...\n  * Longitude    (Longitude) float32 9kB -179.9 -179.8 -179.6 ... 179.8 179.9\nDimensions without coordinates: nv\nData variables:\n    Lon_bounds   (Time, Longitude, nv) float32 207kB dask.array<chunksize=(1, 2160, 2), meta=np.ndarray>\n    Lat_bounds   (Time, Latitude, nv) float32 92kB dask.array<chunksize=(1, 960, 2), meta=np.ndarray>\n    Time_bounds  (Time, nv) datetime64[ns] 192B dask.array<chunksize=(1, 2), meta=np.ndarray>\n    SLA          (Time, Latitude, Longitude) float32 100MB dask.array<chunksize=(1, 960, 2160), meta=np.ndarray>\n    SLA_ERR      (Time, Latitude, Longitude) float32 100MB dask.array<chunksize=(1, 960, 2160), meta=np.ndarray>\nAttributes: (12/21)\n    Conventions:            CF-1.6\n    ncei_template_version:  NCEI_NetCDF_Grid_Template_v2.0\n    Institution:            Jet Propulsion Laboratory\n    geospatial_lat_min:     -79.916664\n    geospatial_lat_max:     79.916664\n    geospatial_lon_min:     0.083333336\n    ...                     ...\n    version_number:         2205\n    Data_Pnts_Each_Sat:     {\"16\": 728440, \"1007\": 702669}\n    source_version:         commit ad8fdfbffc5581946ae8e9ea13699e2d6dcadba9\n    SLA_Global_MEAN:        0.06743581712198123\n    SLA_Global_STD:         0.09305447947672979\n    latency:                final","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"ab9669a9b9752c7bc1f984a6d9fd13d8","path":"/api-cookbook/build/ab9669a9b9752c7bc1f984a6d9fd13d8.html"}}}],"key":"OnUJ6sy5DN"}],"key":"dvWO1X7SWo"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we can see that the dataset has Longitude values between -180 and 180. Great!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Hs7RdF4cQ0"}],"key":"JFBTsphuMa"}],"key":"a3MWWzub3e"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The next step is to subset the data - we don’t need SLA for the entire globe, just for the Western Tropical Atlantic, so there’s no need to be messing with large files. To subset the data, we leverage the power of slicing in xarray:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"m9wQOkY2pF"}],"key":"XtVZV5HxPT"}],"key":"yzvzZaJlXz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"sla_subset = sla_ds['SLA'].sel(Latitude=slice(latmin, latmax), Longitude=slice(lonmin,lonmax))\nsla_subset","key":"Cn10mfd9oH"},{"type":"output","id":"_tJWURg0mryohr74hpYk0","data":[{"output_type":"execute_result","execution_count":8,"metadata":{},"data":{"text/plain":{"content":"<xarray.DataArray 'SLA' (Time: 12, Latitude: 150, Longitude: 150)> Size: 1MB\ndask.array<getitem, shape=(12, 150, 150), dtype=float32, chunksize=(1, 150, 150), chunktype=numpy.ndarray>\nCoordinates:\n  * Latitude   (Latitude) float32 600B -4.917 -4.75 -4.583 ... 19.58 19.75 19.92\n  * Time       (Time) datetime64[ns] 96B 2020-09-03T12:00:00 ... 2020-10-28T1...\n  * Longitude  (Longitude) float32 600B -69.92 -69.75 -69.58 ... -45.25 -45.08\nAttributes:\n    units:          m\n    long_name:      Sea Level Anomaly Estimate\n    standard_name:  sea_surface_height_above_sea_level\n    alias:          sea_surface_height_above_sea_level","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"368b317680f5b0e803610c2e3e14a1c5","path":"/api-cookbook/build/368b317680f5b0e803610c2e3e14a1c5.html"}}}],"key":"ECm6rXNfCI"}],"key":"TXj8bBgFdK"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This looks better, but in order for this to be the main object of analysis and for us to be able to delete the original dataset (spanning the entire global ocean), we need to make sure it has metadata information. In order to do that, we gather some attributes from the original dataset, remove the ones that don’t make sense after subsetting, and assign these attributes to the sla_subset DataArray:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BR47sVhLKh"}],"key":"Lo5C8VaLOJ"}],"key":"KBBoavU6V2"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# get attributes from the original Dataset\nsla_attrs = sla_ds.attrs\ndel sla_ds\n\n# remove some attributes\nattrs_to_be_removed = ['geospatial_lat_min', \n                       'geospatial_lat_max', \n                       'geospatial_lon_min', \n                       'geospatial_lon_max', \n                       'time_coverage_start', \n                       'time_coverage_end']\nfor attr in attrs_to_be_removed:\n    del sla_attrs[attr]\n    \n# assign attributes to DataArray    \nsla_subset = sla_subset.assign_attrs(sla_attrs)\n\n# check that the new attributes are there\nsla_subset.attrs","key":"FsCDSdoAk8"},{"type":"output","id":"8aOrO0EKn4d7OXwLq9cnF","data":[{"output_type":"execute_result","execution_count":9,"metadata":{},"data":{"text/plain":{"content":"{'units': 'm',\n 'long_name': 'MEaSUREs Gridded Sea Surface Height Anomalies Version 2205',\n 'standard_name': 'sea_surface_height_above_sea_level',\n 'alias': 'sea_surface_height_above_sea_level',\n 'Conventions': 'CF-1.6',\n 'ncei_template_version': 'NCEI_NetCDF_Grid_Template_v2.0',\n 'Institution': 'Jet Propulsion Laboratory',\n 'date_created': '2022-10-30T20:57:45.862149',\n 'title': 'Sea Level Anomaly Estimate based on Altimeter Data, final product (replaced interim version).',\n 'short_name': 'SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205',\n 'summary': 'Sea level anomaly grids from altimeter data using Kriging interpolation, which gives best linear prediction based upon prior knowledge of covariance. ',\n 'DOI': '10.5067/SLREF-CDRV3',\n 'version_number': '2205',\n 'Data_Pnts_Each_Sat': '{\"16\": 728440, \"1007\": 702669}',\n 'source_version': 'commit ad8fdfbffc5581946ae8e9ea13699e2d6dcadba9',\n 'SLA_Global_MEAN': np.float64(0.06743581712198123),\n 'SLA_Global_STD': np.float64(0.09305447947672979),\n 'latency': 'final'}","content_type":"text/plain"}}}],"key":"dZ25r7w9mC"}],"key":"h20882Ejb9"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Great, now that we have data and metadata. Now, let’s take a quick look at the data for the few time-steps that we have loaded and see if they show any interesting features for us to investigate further. We can do that easily and interactively with hvplot:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LUxhG6iaxS"}],"key":"iBi9b6Oscy"}],"key":"iBuETCbNuV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"sla_subset.hvplot.image(x='Longitude', y='Latitude', aspect=\"equal\", cmap='RdBu_r', clim=(-0.4, 0.4), title=\"Sea Level Anomaly Estimate (m)\")","key":"xZXQM1iUGI"},{"type":"output","id":"32MLa9zwDyDQMd1AMIVKt","data":[{"output_type":"display_data","metadata":{},"data":{}},{"output_type":"execute_result","execution_count":10,"metadata":{"application/vnd.holoviews_exec.v0+json":{"id":"ec7ca84d-9b70-4ccf-945a-6f76c67bb999"}},"data":{"text/html":{"content_type":"text/html","hash":"8a80ac0550b47dbd7baa1053acad3e5e","path":"/api-cookbook/build/8a80ac0550b47dbd7baa1053acad3e5e.html"},"application/vnd.holoviews_exec.v0+json":{"content":"","content_type":"application/vnd.holoviews_exec.v0+json"},"text/plain":{"content":":DynamicMap   [Time]\n   :Image   [Longitude,Latitude]   (MEaSUREs Gridded Sea Surface Height Anomalies Version 2205)","content_type":"text/plain"}}}],"key":"ExfDWa6rmJ"}],"key":"wXd1fQHgrw"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"After inspection, we decide that the data for Sept 23rd, 2020 looks promising. So let’s subset further, to have just this time-step in our DataArray:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"k7GGh3i23J"}],"key":"nItWSit20p"}],"key":"PtKkdQ2s7G"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"date_selection = '2020-09-23' \nsla_subset_plot = sla_subset.sel(Time=date_selection)\ndel sla_subset\nsla_subset_plot","key":"ulBk9BHuR5"},{"type":"output","id":"-DHqZ6XnCytsiT_VIm4hv","data":[{"output_type":"execute_result","execution_count":11,"metadata":{},"data":{"text/plain":{"content":"<xarray.DataArray 'SLA' (Time: 1, Latitude: 150, Longitude: 150)> Size: 90kB\ndask.array<getitem, shape=(1, 150, 150), dtype=float32, chunksize=(1, 150, 150), chunktype=numpy.ndarray>\nCoordinates:\n  * Latitude   (Latitude) float32 600B -4.917 -4.75 -4.583 ... 19.58 19.75 19.92\n  * Time       (Time) datetime64[ns] 8B 2020-09-23T12:00:00\n  * Longitude  (Longitude) float32 600B -69.92 -69.75 -69.58 ... -45.25 -45.08\nAttributes: (12/18)\n    units:                  m\n    long_name:              MEaSUREs Gridded Sea Surface Height Anomalies Ver...\n    standard_name:          sea_surface_height_above_sea_level\n    alias:                  sea_surface_height_above_sea_level\n    Conventions:            CF-1.6\n    ncei_template_version:  NCEI_NetCDF_Grid_Template_v2.0\n    ...                     ...\n    version_number:         2205\n    Data_Pnts_Each_Sat:     {\"16\": 728440, \"1007\": 702669}\n    source_version:         commit ad8fdfbffc5581946ae8e9ea13699e2d6dcadba9\n    SLA_Global_MEAN:        0.06743581712198123\n    SLA_Global_STD:         0.09305447947672979\n    latency:                final","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"ab6417da2ba7fc9b8d484418f3183d86","path":"/api-cookbook/build/ab6417da2ba7fc9b8d484418f3183d86.html"}}}],"key":"fpT08kHxck"}],"key":"dlMkW8Cqxv"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Note that the subsetted DataArray has all the attributes that we have assigned from the original dataset.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KVJroN6BBb"}],"key":"DxCKXrh9l1"}],"key":"hnBZkT9DaX"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Sea Surface height anomaly visualization","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SDqSxKMR85"}],"identifier":"sea-surface-height-anomaly-visualization","label":"Sea Surface height anomaly visualization","html_id":"sea-surface-height-anomaly-visualization","implicit":true,"key":"hnkzeKg3JW"}],"key":"i82L4G7hM1"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now let’s make a more ellaborate visualization of the data to analyze the features better. For that, we will use the library ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FD0t43Mr7M"},{"type":"inlineCode","value":"cartopy","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"s0cxjzSaVn"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wmcQwhyIFc"}],"key":"Crw2ASycHT"}],"key":"f8ihEItzKR"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# initialize figure\nfig = plt.figure(figsize=(11, 8.5))\nax = plt.subplot(1, 1, 1, projection=ccrs.PlateCarree())\n\n# add features to map\nax.coastlines()\nax.add_feature(cfeature.BORDERS, linewidth=0.5, edgecolor='black')\ngl = ax.gridlines(\n    draw_labels=True, linewidth=2, color='gray', alpha=0.5, linestyle='--'\n)\nax.set_extent([lonmin, lonmax, latmin, latmax], crs=ccrs.PlateCarree())\n\n# plot data\nlevs = np.linspace(0,0.5,6)\nfmt = '%1.1f'\nsla_subset_plot.plot(vmin=-0.5, vmax=0.5, cmap ='RdBu_r', transform=ccrs.PlateCarree())\ncs = sla_subset_plot.squeeze().plot.contour(levels=levs,colors='k')\nax.clabel(cs, levs, fmt=fmt, inline=True, fontsize=10)","key":"JYqNt6qmTp"},{"type":"output","id":"RTQELnQjb2xhtV1PwtQfs","data":[{"output_type":"execute_result","execution_count":12,"metadata":{},"data":{"text/plain":{"content":"<a list of 27 text.Text objects>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1100x850 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"d2897d4aca4ca8e75fe3c4d8448a0b59","path":"/api-cookbook/build/d2897d4aca4ca8e75fe3c4d8448a0b59.png"}}}],"key":"v2eZr4w9At"}],"key":"vtj8ET6aCh"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The colorbar centered in zero helps us understand the data better. The main features are in the eastern part, where close to the coast we can see strong gradients, but altimetry data too close to the coast might have some issues. So we focus on the features further from the coast, and the main ones we see are circular contour lines between 5°N and 10°N, and 45°W and 55°W. Some knowledge of the ocean circulation patterns in the area suggest that these features are associated with the North Brazil Current retroflection and a North Brazil Current Ring. Can we see any signature of that in salinity? Let’s check!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"v9LTDNrfZG"}],"key":"SWlREAURDx"}],"key":"yJrAbXDSYG"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Sea surface salinity data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DUKgjnatyi"}],"identifier":"sea-surface-salinity-data","label":"Sea surface salinity data","html_id":"sea-surface-salinity-data","implicit":true,"key":"riAzZIRlTE"}],"visibility":"show","key":"F2MdAVROp0"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Searching and accessing the data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UzYn6vexN4"}],"identifier":"searching-and-accessing-the-data","label":"Searching and accessing the data","html_id":"searching-and-accessing-the-data-1","implicit":true,"key":"vTjUtyFhOd"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Similarly to what was done for sea surface height anomaly, we’ll visit the  ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yPVEpcYpHv"},{"type":"link","url":"https://search.earthdata.nasa.gov/search","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Earthdata Search website","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pheGwy7148"}],"urlSource":"https://search.earthdata.nasa.gov/search","key":"G0KmRvJh8n"},{"type":"text","value":" to see what salinity data is available for the region and the time-period we’re interested. After some search, we find that the dataset with the shortname “SMAP_RSS_L3_SSS_SMI_8DAY-RUNNINGMEAN_V5” seems applicable, even though it’s an 8-day mean. Let’s set the same bounding box, the time span for around the same day we analyzed for sea surface height anomaly, and see what data is available:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"d1UzcgX35k"}],"key":"esAtDUGWuh"}],"key":"fTzPaTUjsu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# https://search.earthdata.nasa.gov/search/granules/collection-details?p=C2208425700-POCLOUD&pg%5B0%5D%5Bv%5D=f&pg%5B0%5D%5Bqt%5D=2021-09-01%2C2021-11-30&pg%5B0%5D%5Bgsk%5D=-start_date&tl=1718241606.658%213%21%21\nsss_dataname=\"SMAP_RSS_L3_SSS_SMI_8DAY-RUNNINGMEAN_V5\"\n\nsss_results = earthaccess.search_data(\n    short_name=sss_dataname,\n    cloud_hosted=True,\n    temporal=(\"2020-09-23\",\"2020-09-24\"), # considering salt_results = salt_results[::3], the second time-step is the best for showing a ring and comparing to altimetry\n    bounding_box=(lonmin, latmin, lonmax, latmax)\n)","key":"aLRWJ5YL1B"},{"type":"output","id":"o_lyYM-0LURhJpR-j-qOJ","data":[],"key":"gY4vbSG1Nm"}],"key":"D1GfilOiDn"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We notice that there were 9 granules for the time span between 2020-09-23 and 2020-09-24, which seems excessive. Let’s take a look at some of the granules:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lRNE4KuZPN"}],"key":"XQuaEd1OCK"}],"key":"rKg0XB0Sod"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"sss_results[0:3]","key":"It7QQRtKxO"},{"type":"output","id":"R28hFyy7HnDwP6whGGkVB","data":[{"output_type":"execute_result","execution_count":14,"metadata":{},"data":{"text/plain":{"content":"[Collection: {'Version': '5.0', 'ShortName': 'SMAP_RSS_L3_SSS_SMI_8DAY-RUNNINGMEAN_V5'}\n Spatial coverage: {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.125, 'SouthBoundingCoordinate': -89.875, 'EastBoundingCoordinate': 180, 'NorthBoundingCoordinate': 89.875}, {'WestBoundingCoordinate': -180, 'SouthBoundingCoordinate': -89.875, 'EastBoundingCoordinate': -0.125, 'NorthBoundingCoordinate': 89.875}]}}}\n Temporal coverage: {'RangeDateTime': {'EndingDateTime': '2020-09-23T12:00:00.000Z', 'BeginningDateTime': '2020-09-15T12:00:00.000Z'}}\n Size(MB): 46.519227027893066\n Data: ['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SMAP_RSS_L3_SSS_SMI_8DAY-RUNNINGMEAN_V5/RSS_smap_SSS_L3_8day_running_2020_263_FNL_v05.0.nc'],\n Collection: {'Version': '5.0', 'ShortName': 'SMAP_RSS_L3_SSS_SMI_8DAY-RUNNINGMEAN_V5'}\n Spatial coverage: {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.125, 'SouthBoundingCoordinate': -89.875, 'EastBoundingCoordinate': 180, 'NorthBoundingCoordinate': 89.875}, {'WestBoundingCoordinate': -180, 'SouthBoundingCoordinate': -89.875, 'EastBoundingCoordinate': -0.125, 'NorthBoundingCoordinate': 89.875}]}}}\n Temporal coverage: {'RangeDateTime': {'EndingDateTime': '2020-09-24T12:00:00.000Z', 'BeginningDateTime': '2020-09-16T12:00:00.000Z'}}\n Size(MB): 46.50186634063721\n Data: ['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SMAP_RSS_L3_SSS_SMI_8DAY-RUNNINGMEAN_V5/RSS_smap_SSS_L3_8day_running_2020_264_FNL_v05.0.nc'],\n Collection: {'Version': '5.0', 'ShortName': 'SMAP_RSS_L3_SSS_SMI_8DAY-RUNNINGMEAN_V5'}\n Spatial coverage: {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': 0.125, 'SouthBoundingCoordinate': -89.875, 'EastBoundingCoordinate': 180, 'NorthBoundingCoordinate': 89.875}, {'WestBoundingCoordinate': -180, 'SouthBoundingCoordinate': -89.875, 'EastBoundingCoordinate': -0.125, 'NorthBoundingCoordinate': 89.875}]}}}\n Temporal coverage: {'RangeDateTime': {'EndingDateTime': '2020-09-25T12:00:00.000Z', 'BeginningDateTime': '2020-09-17T12:00:00.000Z'}}\n Size(MB): 46.485334396362305\n Data: ['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/SMAP_RSS_L3_SSS_SMI_8DAY-RUNNINGMEAN_V5/RSS_smap_SSS_L3_8day_running_2020_265_FNL_v05.0.nc']]","content_type":"text/plain"}}}],"key":"FHxxRXgDLy"}],"key":"OAKtcJ14Ze"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Looking at the EndingDateTime and BeginningDateTime for each granule, we conclude that ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XtCmnKgp0U"},{"type":"inlineCode","value":"earthaccess","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pkdxpI3Uh5"},{"type":"text","value":" found all the granules in which the date 2020-09-23 and/or 2020-09-24 were used to calculate the 8-day mean, and that’s why there are so many granules.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bhCq5mbKRb"}],"key":"R6nlAo6FNI"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Let’s load the dataset:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OnkvWGdGmk"}],"key":"zDF4hw8zup"}],"key":"Ll7e2vmGZK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\nsss_ds = xr.open_mfdataset(earthaccess.open(sss_results))\nsss_ds","key":"j42pvRNx2E"},{"type":"output","id":"W943ulWWmU4E-AG-ZiVYT","data":[{"output_type":"stream","name":"stderr","text":"\rQUEUEING TASKS | :   0%|          | 0/10 [00:00<?, ?it/s]"},{"output_type":"stream","name":"stderr","text":"\rQUEUEING TASKS | : 100%|██████████| 10/10 [00:00<00:00, 3280.90it/s]"},{"output_type":"stream","name":"stderr","text":"\n"},{"output_type":"stream","name":"stderr","text":"\rPROCESSING TASKS | :   0%|          | 0/10 [00:00<?, ?it/s]"},{"output_type":"stream","name":"stderr","text":"\rPROCESSING TASKS | :  10%|█         | 1/10 [00:01<00:09,  1.05s/it]"},{"output_type":"stream","name":"stderr","text":"\rPROCESSING TASKS | :  50%|█████     | 5/10 [00:01<00:01,  4.85it/s]"},{"output_type":"stream","name":"stderr","text":"\rPROCESSING TASKS | :  90%|█████████ | 9/10 [00:02<00:00,  5.08it/s]"},{"output_type":"stream","name":"stderr","text":"\rPROCESSING TASKS | : 100%|██████████| 10/10 [00:02<00:00,  4.87it/s]"},{"output_type":"stream","name":"stderr","text":"\n"},{"output_type":"stream","name":"stderr","text":"\rCOLLECTING RESULTS | :   0%|          | 0/10 [00:00<?, ?it/s]"},{"output_type":"stream","name":"stderr","text":"\rCOLLECTING RESULTS | : 100%|██████████| 10/10 [00:00<00:00, 158875.15it/s]"},{"output_type":"stream","name":"stderr","text":"\n"},{"output_type":"stream","name":"stdout","text":"CPU times: user 1.36 s, sys: 68.9 ms, total: 1.42 s\nWall time: 15.4 s\n"},{"output_type":"execute_result","execution_count":15,"metadata":{},"data":{"text/plain":{"content":"<xarray.Dataset> Size: 2GB\nDimensions:                 (time: 10, lat: 720, lon: 1440,\n                             uncertainty_components: 9, iceflag_components: 3)\nCoordinates:\n  * lon                     (lon) float32 6kB 0.125 0.375 0.625 ... 359.6 359.9\n  * lat                     (lat) float32 3kB -89.88 -89.62 ... 89.62 89.88\n  * time                    (time) datetime64[ns] 80B 2020-09-19T12:00:00 ......\nDimensions without coordinates: uncertainty_components, iceflag_components\nData variables: (12/19)\n    nobs                    (time, lat, lon) float64 83MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    nobs_RF                 (time, lat, lon) float64 83MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    nobs_40km               (time, lat, lon) float64 83MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    sss_smap                (time, lat, lon) float32 41MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    sss_smap_RF             (time, lat, lon) float32 41MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    sss_smap_unc            (time, lat, lon) float32 41MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    ...                      ...\n    fland                   (time, lat, lon) float32 41MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    gice_est                (time, lat, lon) float32 41MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    surtep                  (time, lat, lon) float32 41MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    winspd                  (time, lat, lon) float32 41MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    sea_ice_zones           (time, lat, lon) int8 10MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    anc_sea_ice_flag        (time, lat, lon, iceflag_components) int8 31MB dask.array<chunksize=(1, 720, 1440, 2), meta=np.ndarray>\nAttributes: (12/65)\n    Conventions:                                            CF-1.7, ACDD-1.3\n    title:                                                  SMAP ocean surfac...\n    version:                                                V5.0 Validated Re...\n    summary:                                                The dataset conta...\n    acknowledgement:                                        Funded under Subc...\n    processing_level:                                       L3\n    ...                                                     ...\n    Source_of_SMAP_SSS_retrievals:                          T. Meissner, F. W...\n    Source_of_ancillary_SST:                                Canada Meteorolog...\n    Source_of_ancillary_CCMP_wind_speed:                    Mears, C. et al.,...\n    Source_of_ancillary_AMSR2_sea_ice_flag_and_correction:  Meissner, T. and ...\n    Source_of_ancillary_land_mask:                          1 km land/water m...\n    Source_of_ancillary_reference_SSS_from_HYCOM:           Hybrid Coordinate...","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"1d1cc71532b08c863655347a07c083c4","path":"/api-cookbook/build/1d1cc71532b08c863655347a07c083c4.html"}}}],"key":"mLlZuHUqZ3"}],"key":"ChVrxCHCLC"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In this dataset we see many of the same issues we saw in the sea surface height anomaly dataset:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"d5xmqubyDS"}],"key":"tcgPiDojMv"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":2,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"large area, much bigger than the bouding box","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"wTjn24c6DM"}],"key":"IuEznAJY6b"},{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"other data variables besides sea surface salinity","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OjAj2JnGSM"}],"key":"xncd9hPtMl"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"longitude between 0 and 360 instead of -180 and 180","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"E0VCgydP1Y"}],"key":"b1OQuZtYB0"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"multiple attributes - that’s a good thing!","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"kQh2XOrqAe"}],"key":"jH7zIYXQvn"}],"key":"gbh4wOSEoI"}],"key":"yxRBEIRO62"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Subsetting the data, adjusting the coordinates and assigning attributes","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MfiCu3JNFr"}],"identifier":"subsetting-the-data-adjusting-the-coordinates-and-assigning-attributes","label":"Subsetting the data, adjusting the coordinates and assigning attributes","html_id":"subsetting-the-data-adjusting-the-coordinates-and-assigning-attributes-1","implicit":true,"key":"zGQef9gg2k"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now we need to adjust this dataset, very similarly to what we did for the sea surface height anomaly one. First, we convert the longitude coordinates and sort the data accordingly:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"dtL2Us0WsD"}],"key":"l9JYErgduW"}],"key":"zG6h9zBBTv"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"sss_ds.coords['lon'] = (sss_ds.coords['lon'] + 180) % 360 - 180\nsss_ds = sss_ds.sortby(sss_ds.lon)\nsss_ds","key":"H69GNECxAU"},{"type":"output","id":"UIeg1jiWjmxETLPI8Sxuc","data":[{"output_type":"execute_result","execution_count":16,"metadata":{},"data":{"text/plain":{"content":"<xarray.Dataset> Size: 2GB\nDimensions:                 (time: 10, lat: 720, lon: 1440,\n                             uncertainty_components: 9, iceflag_components: 3)\nCoordinates:\n  * lat                     (lat) float32 3kB -89.88 -89.62 ... 89.62 89.88\n  * time                    (time) datetime64[ns] 80B 2020-09-19T12:00:00 ......\n  * lon                     (lon) float32 6kB -179.9 -179.6 ... 179.6 179.9\nDimensions without coordinates: uncertainty_components, iceflag_components\nData variables: (12/19)\n    nobs                    (time, lat, lon) float64 83MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    nobs_RF                 (time, lat, lon) float64 83MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    nobs_40km               (time, lat, lon) float64 83MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    sss_smap                (time, lat, lon) float32 41MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    sss_smap_RF             (time, lat, lon) float32 41MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    sss_smap_unc            (time, lat, lon) float32 41MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    ...                      ...\n    fland                   (time, lat, lon) float32 41MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    gice_est                (time, lat, lon) float32 41MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    surtep                  (time, lat, lon) float32 41MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    winspd                  (time, lat, lon) float32 41MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    sea_ice_zones           (time, lat, lon) int8 10MB dask.array<chunksize=(1, 720, 1440), meta=np.ndarray>\n    anc_sea_ice_flag        (time, lat, lon, iceflag_components) int8 31MB dask.array<chunksize=(1, 720, 1440, 2), meta=np.ndarray>\nAttributes: (12/65)\n    Conventions:                                            CF-1.7, ACDD-1.3\n    title:                                                  SMAP ocean surfac...\n    version:                                                V5.0 Validated Re...\n    summary:                                                The dataset conta...\n    acknowledgement:                                        Funded under Subc...\n    processing_level:                                       L3\n    ...                                                     ...\n    Source_of_SMAP_SSS_retrievals:                          T. Meissner, F. W...\n    Source_of_ancillary_SST:                                Canada Meteorolog...\n    Source_of_ancillary_CCMP_wind_speed:                    Mears, C. et al.,...\n    Source_of_ancillary_AMSR2_sea_ice_flag_and_correction:  Meissner, T. and ...\n    Source_of_ancillary_land_mask:                          1 km land/water m...\n    Source_of_ancillary_reference_SSS_from_HYCOM:           Hybrid Coordinate...","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"fb22e143f87762f71f5d445610232a92","path":"/api-cookbook/build/fb22e143f87762f71f5d445610232a92.html"}}}],"key":"jOeYZyWhWM"}],"key":"imre2YuT8j"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Then we subset just for the variable we want, for the area within the bounding box, and make sure to assign most attributes from the original dataset:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YnANKdw864"}],"key":"xqunZCtQQr"}],"key":"Afj63MMVC1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# geographically subset\nsss_subset = sss_ds['sss_smap_40km'].sel(lat=slice(latmin, latmax), lon=slice(lonmin,lonmax))\n\n# get attributes from original dataset\nsss_attrs = sss_ds.attrs\ndel sss_ds\n\n# remove attributes that don't apply\nattrs_to_be_removed = ['center_day_of_observation',\n                      'first_orbit',\n                      'last_orbit',\n                      'geospatial_lat_min', \n                      'geospatial_lat_max', \n                      'geospatial_lon_min', \n                      'geospatial_lon_max', \n                      'time_coverage_start', \n                      'time_coverage_end']\nfor attr in attrs_to_be_removed:\n    del sss_attrs[attr]\n    \nsss_subset = sss_subset.assign_attrs(sss_attrs)\nsss_subset","key":"SAtL1UtTeP"},{"type":"output","id":"3SCRAcbX9gei1spSfCjEv","data":[{"output_type":"execute_result","execution_count":17,"metadata":{},"data":{"text/plain":{"content":"<xarray.DataArray 'sss_smap_40km' (time: 10, lat: 100, lon: 100)> Size: 400kB\ndask.array<getitem, shape=(10, 100, 100), dtype=float32, chunksize=(1, 100, 100), chunktype=numpy.ndarray>\nCoordinates:\n  * lat      (lat) float32 400B -4.875 -4.625 -4.375 ... 19.38 19.62 19.88\n  * time     (time) datetime64[ns] 80B 2020-09-19T12:00:00 ... 2020-09-28T12:...\n  * lon      (lon) float32 400B -69.88 -69.62 -69.38 ... -45.62 -45.38 -45.12\nAttributes: (12/62)\n    long_name:                                              SMAP sea surface ...\n    standard_name:                                          sea_surface_salinity\n    units:                                                  1e-3\n    valid_min:                                              0.0\n    valid_max:                                              45.0\n    coverage_content_type:                                  physicalMeasurement\n    ...                                                     ...\n    Source_of_SMAP_SSS_retrievals:                          T. Meissner, F. W...\n    Source_of_ancillary_SST:                                Canada Meteorolog...\n    Source_of_ancillary_CCMP_wind_speed:                    Mears, C. et al.,...\n    Source_of_ancillary_AMSR2_sea_ice_flag_and_correction:  Meissner, T. and ...\n    Source_of_ancillary_land_mask:                          1 km land/water m...\n    Source_of_ancillary_reference_SSS_from_HYCOM:           Hybrid Coordinate...","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"0df31e7f55c5b26070b7f22311916551","path":"/api-cookbook/build/0df31e7f55c5b26070b7f22311916551.html"}}}],"key":"nYjvuXsS6E"}],"key":"VSmJoodwaA"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we need to choose a time-step. If we look at the coordinates “time”, we’ll notice that the days in it are the center days of the running mean. So we’ll just pick the same day used for the sea surface height anomaly data, ‘2020-09-23’:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VjKxlfryHi"}],"key":"rS2NxXPXAX"}],"key":"GJNUSkhiPV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"date_selection = '2020-09-23'\nsss_subset_plot = sss_subset.sel(time=date_selection)\ndel sss_subset\n\nsss_subset_plot","key":"KS7gS3iqyS"},{"type":"output","id":"4jI2wBe9SjPuKRgpYgglw","data":[{"output_type":"execute_result","execution_count":18,"metadata":{},"data":{"text/plain":{"content":"<xarray.DataArray 'sss_smap_40km' (time: 1, lat: 100, lon: 100)> Size: 40kB\ndask.array<getitem, shape=(1, 100, 100), dtype=float32, chunksize=(1, 100, 100), chunktype=numpy.ndarray>\nCoordinates:\n  * lat      (lat) float32 400B -4.875 -4.625 -4.375 ... 19.38 19.62 19.88\n  * time     (time) datetime64[ns] 8B 2020-09-23T12:00:00\n  * lon      (lon) float32 400B -69.88 -69.62 -69.38 ... -45.62 -45.38 -45.12\nAttributes: (12/62)\n    long_name:                                              SMAP sea surface ...\n    standard_name:                                          sea_surface_salinity\n    units:                                                  1e-3\n    valid_min:                                              0.0\n    valid_max:                                              45.0\n    coverage_content_type:                                  physicalMeasurement\n    ...                                                     ...\n    Source_of_SMAP_SSS_retrievals:                          T. Meissner, F. W...\n    Source_of_ancillary_SST:                                Canada Meteorolog...\n    Source_of_ancillary_CCMP_wind_speed:                    Mears, C. et al.,...\n    Source_of_ancillary_AMSR2_sea_ice_flag_and_correction:  Meissner, T. and ...\n    Source_of_ancillary_land_mask:                          1 km land/water m...\n    Source_of_ancillary_reference_SSS_from_HYCOM:           Hybrid Coordinate...","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"634a51cfdec214693271751d50724445","path":"/api-cookbook/build/634a51cfdec214693271751d50724445.html"}}}],"key":"RddvAcna6F"}],"key":"ClXLHx51rC"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Sea surface salinity visualization","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WsCHaEpF9u"}],"identifier":"sea-surface-salinity-visualization","label":"Sea surface salinity visualization","html_id":"sea-surface-salinity-visualization","implicit":true,"key":"PBtOVKTps9"}],"key":"BdNvsXv13h"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Great, we got a DataArray with just one time-step; now let’s plot a map of it:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"B1M5ewmEm2"}],"key":"d1aHOTUUUy"}],"key":"nCqnZ6n6RX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# initialize the figure\nfig = plt.figure(figsize=(23, 8.5))\n\n# add features to map\nax = plt.subplot(1, 1, 1, projection=ccrs.PlateCarree())\nax.coastlines()\nax.add_feature(cfeature.BORDERS, linewidth=0.5, edgecolor='black')\ngl = ax.gridlines(\n    draw_labels=True, linewidth=2, color='gray', alpha=0.5, linestyle='--'\n)\nax.set_extent([lonmin, lonmax, latmin, latmax], crs=ccrs.PlateCarree())\n\n# plot data\nlevs_sss = np.linspace(5,37,12)\nfmt_sss = '%1.0f'\nsss_subset_plot.plot(vmin=5, vmax=37, transform=ccrs.PlateCarree())\ncs = sss_subset_plot.squeeze().plot.contour(levels=levs_sss,colors='k')\nax.clabel(cs, levs_sss, fmt=fmt_sss, inline=True, fontsize=10)","key":"cfoiYYIvHB"},{"type":"output","id":"nd9WHq8BMjdCd2liOZye5","data":[{"output_type":"execute_result","execution_count":19,"metadata":{},"data":{"text/plain":{"content":"<a list of 57 text.Text objects>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 2300x850 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"2a7ccd8e2f6c095f17ceb59b87666439","path":"/api-cookbook/build/2a7ccd8e2f6c095f17ceb59b87666439.png"}}}],"key":"vva3JdryQ0"}],"key":"fcZ4idpzZ8"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The sea surface salinity map seems good, but if we put the plots next to each other, we could have a better understanding of what’s going on.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ltlhVLCmwq"}],"key":"TePSv1QmWI"}],"key":"yMuLwViRUp"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Sea surface height anomaly and sea surface salinity combined visualization","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KFeN0rdDNh"}],"identifier":"sea-surface-height-anomaly-and-sea-surface-salinity-combined-visualization","label":"Sea surface height anomaly and sea surface salinity combined visualization","html_id":"sea-surface-height-anomaly-and-sea-surface-salinity-combined-visualization","implicit":true,"key":"wGRE92K211"}],"key":"nMm1z2jFWy"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# initialize figure\nfig, (ax1, ax2) = plt.subplots(1,2,\n                               subplot_kw = {'projection':ccrs.PlateCarree()},\n                               figsize=(25, 8.5))\n# add features to subplots\nfor ax in (ax1, ax2):\n    ax.coastlines()\n    ax.add_feature(cfeature.BORDERS, linewidth=0.5, edgecolor='black')\n    gl = ax.gridlines(\n        draw_labels=True, linewidth=2, color='gray', alpha=0.5, linestyle='--'\n    )\n    ax.set_extent([lonmin, lonmax, latmin, latmax], crs=ccrs.PlateCarree())\n\n# plot sla\nlevs_sla = np.linspace(0,0.5,6)\nfmt_sla = '%1.1f'\nsla_subset_plot.plot(ax= ax1,vmin=-0.5, vmax=0.5, cmap ='RdBu_r', transform=ccrs.PlateCarree())\ncs = sla_subset_plot.squeeze().plot.contour(ax= ax1,levels=levs_sla,colors='k')\nax1.clabel(cs, levs_sla, fmt=fmt_sla, inline=True, fontsize=10)\n\n# plot sss\nlevs_sss = np.linspace(5,37,10)\nfmt_sss = '%1.0f'\nsss_subset_plot.plot(ax= ax2,vmin=5, vmax=37, transform=ccrs.PlateCarree())\ncs = sss_subset_plot.squeeze().plot.contour(ax= ax2,levels=levs_sss,colors='k')\nax1.clabel(cs, levs_sss, fmt=fmt_sss, inline=True, fontsize=10)\nplt.savefig(\"subplots.png\",dpi=100)","key":"aT7NUAFF7g"},{"type":"output","id":"O5Cu84PPviZBEglGIH1np","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 2500x850 with 4 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"762026d7ff0858b71c9a0ffb041a9fab","path":"/api-cookbook/build/762026d7ff0858b71c9a0ffb041a9fab.png"}}}],"key":"cc5cOLZ91w"}],"key":"ZrGQM4RYrJ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Great; with the maps side-by-side, it’s easier to understand the features. In the salinity map, we can see the freshwater discharge from the Orinoco and Amazon Rivers, close to the coast, at about 61°W,9°N and -48°W,0°, respectively. In addition, we can see a somewhat circular fresher water feature between about 50°W-55°W and 5°N-10°N. The location of this feature coincides with the location of the high circular sea surface height anomaly contours, strenghtening our hypothesis that it’s a North Brazil Current Ring transporting freshwater from the Amazon River to the Caribbean. To the right, one can see the higher salinity values in a concave configuration, coinciding with the location of other circular sea surface height anomaly contours, suggesting this is a signature of the North Brazil Current retroflection, bringing salty water from the Equatorial Atlantic. For more information on this process, see ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZkfmJay3nZ"},{"type":"link","url":"https://bg.copernicus.org/articles/19/2969/2022/","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"this article","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PZ9bAxpZNz"}],"urlSource":"https://bg.copernicus.org/articles/19/2969/2022/","key":"eIJ31quzJt"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hiRTsUsBPs"}],"key":"pgTwTtJbnU"}],"key":"JFKHWv5OY7"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Saving the data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PZesxncg60"}],"identifier":"saving-the-data","label":"Saving the data","html_id":"saving-the-data","implicit":true,"key":"Cv2S5rtG59"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Remember: we have done all this visualization without downloading one single data file! That’s one of the best functionalities of xarray, the ability of looking at the data with “no strings attached”, so you can only download once you know that dataset will work for you.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uNj9OVTOKH"}],"key":"mjyecunrkP"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Now that we’ve seen that the subset DataArrays have interesting features, we may want to download them to our local machines, so we can analyze them further. That’s very easy to do with xarray, by saving it in netCDF format. Here we build some filenames to use to save the DataArrays, but of course we could use any filename.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"mmDVnmavem"}],"key":"Q8tCEXKCoY"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"One very important thing to notice is that the saved files will contain the attributes we assigned from the original Dataset. This is necessary for reproducibility, so other people can build on your work, or even future you can have access to details of the data.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"J32pyK9bj8"}],"key":"MaD8URgqFU"}],"key":"vow0wajwJk"},{"type":"block","kind":"notebook-content","children":[{"type":"div","class":"admonition alert alert-warning","children":[{"type":"paragraph","children":[{"type":"text","value":"Warning","key":"zb8ZIZ8e1W"}],"key":"azt09oljkn"},{"type":"text","value":"Here we leave the saving commands commented, because if you continuously save files you can run out of storage. So be mindful when saving files!","key":"J38FOAYhCq"}],"key":"a3B5C8kVzi"}],"key":"M5NAjKaCHu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"sss_filename = sss_subset_plot.attrs['standard_name'] + \".nc\"\nsla_filename = sla_subset_plot.attrs['standard_name'] + \".nc\"\n\n# saving files - be careful here so you won't run out of storage!\n# sss_subset_plot.to_netcdf(sss_filename)\n# sla_subset_plot.to_netcdf(sla_filename)","key":"DHg9k6pEZa"},{"type":"output","id":"Y3Bj5HAQfqFkMAfUL5Eoz","data":[],"key":"S12NaKu8Xg"}],"key":"n9edoPqQA7"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WvvWAht0d3"}],"key":"icRGVesHJo"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mJQyO6bUsE"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"ekPNZvjMmD"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"In this notebook we were able to leverage the ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"eUbhl471ui"},{"type":"inlineCode","value":"earthaccess","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"akzA3CQ9aS"},{"type":"text","value":" library to access large datasets with ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"oVhYah7Bnf"},{"type":"inlineCode","value":"xarrray","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Y0mPcN9qPO"},{"type":"text","value":" and visualize them with ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ni3FMIjnY2"},{"type":"inlineCode","value":"matplotlib","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"FTqTEnTjDV"},{"type":"text","value":" and ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"qNF7iY1Tz4"},{"type":"inlineCode","value":"cartopy","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"c0Yh8gwrNn"},{"type":"text","value":". We learned the advantages of accessing data programatically, including promoting science reproducibility. We were able to subset data and then, only when we identified data that would be of interest, download it. That is specially advantageous for cases with limited available storage or limited computing capacity.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"nDO0ynE8dc"}],"key":"zzKzmURehQ"},{"type":"heading","depth":3,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"What’s next?","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"znkr5ZHeEj"}],"identifier":"whats-next","label":"What’s next?","html_id":"whats-next","implicit":true,"key":"iMIncxbRhK"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://search.earthdata.nasa.gov","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Nasa Earthdata Search","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"RGqTwgqMae"}],"urlSource":"https://search.earthdata.nasa.gov","key":"HVlfTH4h2f"},{"type":"text","value":" has various types of data, in different formats and from different platforms. The user is certainly encouraged to play around with other types of data, to become more comfortable with this tool.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"P6gHgge3JL"}],"key":"tVxqLbflfD"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"ppKUXI8U0C"},{"type":"inlineCode","value":"earthaccess","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"TPP1oBmciR"},{"type":"text","value":" library is a wrap around the NASA Earth Science APIs. With the knowledge from this notebook, the user may understand bettter the structure of metadata in APIs and feel more comfortable accessing data via APIs from other sources, such as ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"RuQCzkWKnN"},{"type":"link","url":"https://www.ncei.noaa.gov/support/access-data-service-api-user-documentation","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"NCEI","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"LcRTAH5wIu"}],"urlSource":"https://www.ncei.noaa.gov/support/access-data-service-api-user-documentation","key":"KkUZ5Wc35u"},{"type":"text","value":" and ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"sMrxGRwUys"},{"type":"link","url":"https://data.usgs.gov/datacatalog/api/docs","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"USGS","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"cVvHQvLKCz"}],"urlSource":"https://data.usgs.gov/datacatalog/api/docs","key":"SFJMU5bRj1"},{"type":"text","value":".","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"JHWWGgChsb"}],"key":"f9nYQr9rG4"}],"key":"vNZ5RZ7utP"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sXsxGhMp48"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"O7Lb2B3fFs"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"link","url":"https://search.earthdata.nasa.gov/","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Earthdata Search web application","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Bv6jKNWfdE"}],"urlSource":"https://search.earthdata.nasa.gov/","key":"o97mnt7Jp2"}],"key":"gLfcNOQQrD"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"link","url":"https://www.earthdata.nasa.gov/learn/blog/earthaccess","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"info on earthaccess","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"vhnFQRXKPZ"}],"urlSource":"https://www.earthdata.nasa.gov/learn/blog/earthaccess","key":"CvNJvtKC0c"}],"key":"lHUVDov5h2"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://github.com/nsidc/earthaccess","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"earthaccess Github repository","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"iA5Mi7WkTr"}],"urlSource":"https://github.com/nsidc/earthaccess","error":true,"key":"kOyb3O2Nid"}],"key":"L2Dol2HlfQ"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://earthaccess.readthedocs.io/en/latest/","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"earthaccess documentation page","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"EUG8WhlbRL"}],"urlSource":"https://earthaccess.readthedocs.io/en/latest/","key":"dfgbD1c4zJ"}],"key":"b769pHXz99"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://nasa-openscapes.github.io/earthdata-cloud-cookbook/tutorials/Earthdata-cloud-clinic.html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Earthdata cloud clinic","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"VG2yo60kMi"}],"urlSource":"https://nasa-openscapes.github.io/earthdata-cloud-cookbook/tutorials/Earthdata-cloud-clinic.html","key":"ps39oTasFS"}],"key":"QdVlS6qX2N"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://data.usgs.gov/datacatalog/api/docs#/Harvest/read_harvested_files_harvest_files_get","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"USGS Science Data Catalog API Documentation","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"QvxGUgRhO2"}],"urlSource":"https://data.usgs.gov/datacatalog/api/docs#/Harvest/read_harvested_files_harvest_files_get","key":"WzzGoF28tS"}],"key":"N3kyu2FBpr"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"link","url":"https://www.ncei.noaa.gov/support/access-data-service-api-user-documentation","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"NCEI API user documentation","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"LyYLkgNGA6"}],"urlSource":"https://www.ncei.noaa.gov/support/access-data-service-api-user-documentation","key":"gDvbdS9T11"}],"key":"BVw1lZIgKQ"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Intro to cartopy","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"vDVFGLaHa0"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy","key":"OyQCq0FgmA"}],"key":"hsbUJPoNji"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib/matplotlib-basics","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Matplotlib basics","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"EQU9oqlRMA"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib/matplotlib-basics","key":"YwjmENDlQW"}],"key":"mxRSuIlV05"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/data-formats/netcdf-cf","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"netCDF and CF: the basics","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"T6iu5wTJUq"}],"urlSource":"https://foundations.projectpythia.org/core/data-formats/netcdf-cf","key":"pFMtGVABZM"}],"key":"LDPXgmHzer"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/xarray/xarray-intro","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Introduction to Xarray","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"f9BxFWmBqa"}],"urlSource":"https://foundations.projectpythia.org/core/xarray/xarray-intro","key":"RKYwxDN15V"}],"key":"kNunRbAxgE"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"link","url":"https://bg.copernicus.org/articles/19/2969/2022/","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Article on North Brazil Current Rings","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"VJW0Kvpfh5"}],"urlSource":"https://bg.copernicus.org/articles/19/2969/2022/","key":"s5fNSQWEPQ"}],"key":"i0aMkWCrhU"}],"key":"hikKaCuae0"}],"key":"n2xCQ8h8xJ"}],"key":"ZxNOwg8I9d"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"NASA API: World Map of Fireball Impacts","url":"/notebooks/example-workflows/cneos-fireball","group":"Example Workflows"},"next":{"title":"Whiteface Mountain Cloud Water Data","url":"/notebooks/example-workflows/wfm-cloud-water","group":"Example Workflows"}}},"domain":"http://localhost:3000"}